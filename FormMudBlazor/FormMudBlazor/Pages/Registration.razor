@page "/registration"

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using FormMudBlazor.Models
@inject SweetAlertService swal
@inject IJSRuntime js

<div class="container-fluid" style="margin-top: 79px;">
    <div class="ma-6 d-flex justify-center">
        <MudCard Width="500px" Style="border-block-start: 3px groove rgb(10, 28, 83); padding-block: 15px 5px;">
            <MudChip T="string" Style="background-color: forestgreen; color: whitesmoke;">Account Registration Form</MudChip>
            <MudForm Model="model" Validation="registrationModelValidation.ValidateValue">
                <MudCardContent>
                    <MudTextField @bind-Value="model.Name" For="@(()=>model.Name)" Immediate="true" Label="FullName"></MudTextField>
                    <MudTextField @bind-Value="model.Email" For="@(()=>model.Email)" Immediate="true" Label="Email"
                                  InputType="InputType.Email"></MudTextField>
                    <MudTextField @bind-Value="model.PhoneNumber" For="@(()=>model.PhoneNumber)" Immediate="true" Label="Phone Number"
                                  InputType="InputType.Number" InputId="phoneNumberField"></MudTextField>
                    <MudTextField @bind-Value="model.Password" For="@(()=>model.Password)" Immediate="true" Label="Password"
                                  InputType="InputType.Password"></MudTextField>
                    <MudTextField @bind-Value="model.ConfirmPassword" For="@(()=>model.ConfirmPassword)" Immediate="true"
                                  Label="Confirm Password" InputType="InputType.Password"></MudTextField>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Style="background-color: forestgreen; color: whitesmoke;" Class="ml-auto"
                               ButtonType="ButtonType.Button" OnClick="@HandleRegisterClick">Register</MudButton>
                </MudCardActions>
            </MudForm>
        </MudCard>
    </div>
</div>

<script>
    clearInterval(sliderInterval); // Detener el intervalo
    window.onscroll = null;
    window.onscroll = function () { scrollFunction() };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("scrollBtn").style.display = "block";

        } else {
            document.getElementById("scrollBtn").style.display = "none";
        }
    }

    function scrollToTop() {
        document.body.scrollTop = 0; // Para navegadores Safari
        document.documentElement.scrollTop = 0; // Para otros navegadores
    }
</script>

@code{
    RegistrationModel model = new();
    RegistrationModelValidation registrationModelValidation = new();

    private async Task HandleRegisterClick()
    {
        // Validar el modelo antes de proceder
        var validationResult = await registrationModelValidation.ValidateAsync(model);

        if (validationResult.IsValid)
        {
            await swal.FireAsync("Éxito", "Diligenciado exitosamente", SweetAlertIcon.Success);
            model = new();
            StateHasChanged();
        }
        else
        {
            // Si hay errores de validación, puedes manejarlos aquí
            // Puedes mostrar los errores al usuario si lo deseas
            foreach (var error in validationResult.Errors)
            {
                Console.WriteLine($"Error: {error.ErrorMessage}");
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Llama al JavaScript interop para aplicar la restricción de longitud máxima
            await js.InvokeVoidAsync("maxLengthHandler", "phoneNumberField", 10);
        }
    }
}
