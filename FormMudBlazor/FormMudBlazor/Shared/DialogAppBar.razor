@inject IDialogService Dialog

<MudDialog Style="margin-top: 31px;" aria-hidden="false">
    <DialogContent>
        <div class="container">
            <div class="row">
                <div class="col-md-12 d-flex justify-content-center">
                    <div class="d-flex justify-content-center">
                        <MudLink Href="" Class="pa-0 mx-1" Elevation="2" Color="Color.Inherit" Style="font-size: 14px;">
                            <MudIcon Icon="@Icons.Material.Rounded.Home" Size="Size.Medium" /> Inicio
                        </MudLink>
                        <MudLink Href="#" Class="pa-0 mx-1" Elevation="2" Color="Color.Inherit" Style="font-size: 14px;">
                            <MudIcon Icon="@Icons.Material.Rounded.Business" Size="Size.Medium" /> Conócenos
                        </MudLink>
                        <MudLink Href="#" Class="pa-0 mx-1" Elevation="2" Color="Color.Inherit" Style="font-size: 14px;">
                            <MudIcon Icon="@Icons.Material.Rounded.ContactMail" Size="Size.Medium" /> Contáctanos
                        </MudLink>
                    </div>
                </div>
                <div class="col-md-12 d-flex justify-content-center align-items-center mt-3">
                    <MudButton OnClick="@(() => OpenDialogBuscarAsync(_topCenter))" Class="pa-1"
                               Style="background-color: transparent;">
                        <MudAvatar Style="color: rgb(10, 28, 83); border-color: transparent;" Variant="Variant.Outlined">
                            <MudIcon Icon="@Icons.Material.Rounded.Search" Size="Size.Medium" />
                        </MudAvatar>
                    </MudButton>
                    <MudLink Href="#" Class="pa-1" Style="background-color: transparent;">
                        <MudBadge Color="Color.Success" Overlap="true">
                            <MudAvatar Style="color: rgb(10, 28, 83); border-color: rgb(10, 28, 83); " Variant="Variant.Outlined">
                                <MudIcon Icon="@Icons.Material.Rounded.Person2"
                                         Size="Size.Medium" />
                            </MudAvatar>
                        </MudBadge>
                    </MudLink>
                    <MudSwitch Class="pa-1" @bind-Value="_checked" @onchange="Change"
                               Color="@(_checked ? Color.Info : Color.Error)">
                        <thumbTemplate>
                            <div class="thumb-content d-flex align-items-center justify-content-center @(_checked ? "thumb-on" : "thumb-off")">
                                @if (_checked)
                                {
                                    <img src="/icons/colombia.svg" alt="Colombia Flag" style="width: 36px; height: 36px;" />
                                    <p style="font-size: 20px;" class="ml-2 mb-0">ES</p>
                                }
                                else
                                {
                                    <img src="/icons/usa.svg" alt="USA Flag" style="width: 36px; height: 36px;" />
                                    <p style="font-size: 20px;" class="ml-2 mb-0">EN</p>
                                }
                            </div>
                        </thumbTemplate>
                    </MudSwitch>
                </div>
                <div class="col-md-12 d-flex justify-content-center align-items-center mt-3">
                    <MudLink Href="registration" Color="Color.Inherit" Class="pa-2" Style="font-size: 14px;">
                        <MudIcon Icon="@Icons.Material.Rounded.SaveAs" Size="Size.Medium" /> Regístrate
                    </MudLink>
                </div>
            </div>
        </div>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance? MudDialog { get; set; }

    private readonly DialogOptions _topCenter = new() { Position = DialogPosition.TopCenter };

    private bool _checked = false;
    private void Change()
    {
        _checked = !_checked;
        StateHasChanged();
    }

    private Task OpenDialogBuscarAsync(DialogOptions options)
    {
        return Dialog.ShowAsync<DialogSearch>("Custom Options Dialog", options);
    }
}

<style>
    .thumb-content {
        transition: background-color 0.3s ease; /* Transición suave */
    }

    .thumb-on {
        color: var(--mud-palette-warning) !important; /* Color del thumb cuando está encendido */
    }

    .thumb-off {
        color: var(--mud-palette-error) !important; /* Color del thumb cuando está apagado */
    }

    .mud-switch-span .mud-switch-track {
        background-color: var(--mud-palette-info) !important;
    }

    /* Estilo para el MudSwitch cuando está en estado true */
    .mud-switch-span .mud-info .mud-switch-track {
        background-color: var(--mud-palette-info) !important;
    }
</style>
