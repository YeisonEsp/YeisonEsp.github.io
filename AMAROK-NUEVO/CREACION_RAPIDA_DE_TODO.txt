-- A CONTINUACION SE CREA EL USUARIO DE ADMIN PARA EL PROYECTO AMAROK --
-- ANTES DE CREAR LA BASE DE DATOS, DEBEMOS CORRER LA SIGUIENTE SENTENCIA SQL. IMPORTANTE HACERLO POR SEPARADO!!, DE LO CONTRARIO
-- SALDRÁ ERROR PORQUE NO SE PUEDE EJECUTAR AMBAS SENTENCIAS EN UN MISMO BLOQUE DE TRANSACCIÓN --

--CREATE USER yespinosa WITH PASSWORD 'Yeison01*';--

-- LUEGO DE EJECUTAR LO ANTERIOR, PROCEDEMOS A CREAR LA BASE DE DATOS ASIGNADA AL OWNER "USUARIO PREVIAMENTE CREADO" --

--CREATE DATABASE db_amarok WITH OWNER yespinosa;--

-- UNA VEZ CREADA LA BASE DE DATOS, PROCEDEMOS A INGRESAR EN EL QUERY TOOL DE LA MÍSMA. Y EJECUTAMOS TODO LO SIGUIENTE --

--ALTER USER yespinosa WITH SUPERUSER;--
--ALTER USER yespinosa WITH CREATEDB;--
--ALTER USER yespinosa WITH CREATEROLE;--

--DDL

-- A CONTINUACION SE REALIZA EL DDL DE LAS TABLAS PARA EL PROYECTO AMAROK --
-- 
DROP TABLE IF EXISTS detallepedido;
DROP TABLE IF EXISTS pedidoproveedor;
DROP TABLE IF EXISTS empresatransporte;
DROP TABLE IF EXISTS envio;
DROP TABLE IF EXISTS redencionpuntos;
DROP TABLE IF EXISTS detalleventa;
DROP TABLE IF EXISTS venta;
DROP TABLE IF EXISTS usuario;
DROP TABLE IF EXISTS cliente;
DROP TABLE IF EXISTS producto;
DROP TABLE IF EXISTS seccion;
DROP TABLE IF EXISTS bandeja;
DROP TABLE IF EXISTS estante;
DROP TABLE IF EXISTS marca;
DROP TABLE IF EXISTS linea;
DROP TABLE IF EXISTS tipoproducto;
DROP TABLE IF EXISTS proveedor;
DROP TABLE IF EXISTS tipopago;
DROP TABLE IF EXISTS ciudad;
DROP TABLE IF EXISTS departamento;
DROP TABLE IF EXISTS contactenos;
DROP TABLE IF EXISTS parametros;

-- TABLA DE PARAMETROS
CREATE TABLE parametros
(
    empreNit          VARCHAR(10) NOT NULL,                             -- NIT DE LA EMPRESA AMAROK
    empreNom          VARCHAR(50) NOT NULL,                             -- NOMBRE DE LA EMPRESA AMAROK
    empreDir          VARCHAR(80) NOT NULL,                             -- DIRECCIÓN DE LA EMPRESA AMAROK
    empreTel          VARCHAR(10) NOT NULL,                             -- TELÉFONO FIJO DE LA EMPRESA AMAROK
    empreCel          VARCHAR(10) NOT NULL,                             -- CELULAR DE LA EMPRESA AMAROK
    empreEma          VARCHAR(50) NOT NULL,                             -- CORREO DE LA EMPRESA AMAROK
    numFacIni         DECIMAL(5,0) NOT NULL,                            -- NÚMERO INICIAL RANGO DE LA FACTURA
    numFacFin         DECIMAL(5,0) NOT NULL,                            -- NÚMERO FINAL RANGO DE LA FACTURA
    numFacFal         DECIMAL(5,0) NOT NULL,                            -- NÚMERO DE FACTURA FALSO DE LA FACTURA PARA PEDIDO DE CLIENTE
    porcenIva         DECIMAL(2,0) NOT NULL,                            -- PORCENTAJE DEL VALOR DEL IVA ACTUAL EN COLOMBIA
    redPunDes         DECIMAL(4,0) NOT NULL,                            -- PUNTAJE MÍNIMO NECESARIO PARA REDIMIR UN DESCUENTO DEL 30%
    redPunDom         DECIMAL(4,0) NOT NULL,                            -- PUNTAJE MÍNIMO NECESARIO PARA REDIMIR UN DOMICILIO GRATIS
    adminCon          VARCHAR(300) NOT NULL,                            -- CONTRASEÑA DEL ADMIN
    tiempoSalir       DECIMAL(2,0) NOT NULL,                            -- TIEMPO PARA CERRAR LA SESIÓN AUTOMÁTICAMENTE(MINUTOS)
    sesionActiva      BOOLEAN NOT NULL DEFAULT FALSE,                   -- INDICADOR DE SESIÓN ACTIVA DEL ADMIN
    usr_update         VARCHAR(15),                                     -- USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    usr_update_rol     VARCHAR(15),                                     -- ROL DEL USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    fec_update         TIMESTAMP,                                       -- FECHA EN LA QUE SE ACTUALIZÓ EL REGISTRO
    PRIMARY KEY(empreNit)
);

-- TABLA DE EXCEPCIONES
CREATE TABLE excepciones
(
    excepCod        VARCHAR(5) NOT NULL,                                -- CÓDIGO IDENTIFICADOR DE LA EXCEPCIÓN
    excepNom        VARCHAR(100) NOT NULL,                               -- NOMBRE DE LA EXCEPCIÓN
    PRIMARY KEY (excepCod)
);

-- TABLA DE CONTACTENOS
CREATE TABLE contactenos
(                                                                         
    contacId            DECIMAL(9,0) NOT NULL,                          -- NÚMERO IDENTIFICADOR DEL CONTACTO
    contacNom           VARCHAR(60) NOT NULL,                           -- NOMBRE DE LA EMPRESA QUE CONTACTA
    contacTel           VARCHAR(10) NOT NULL,                           -- TELÉFONO DE LA EMPRESA QUE CONTACTA
    contacEma           VARCHAR(50) NOT NULL,                           -- CORREO DE LA EMPRESA QUE CONTACTA
    contacAsu           VARCHAR(200) NOT NULL,                          -- ASUNTO DE LA EMPRESA QUE CONTACTA
    contacRev           BOOLEAN NOT NULL DEFAULT FALSE,                 -- INDICADOR DE SI UN MENSAJE FUE REVISADO O NO
    fec_insert          TIMESTAMP NOT NULL DEFAULT NOW(),               -- FECHA EN LA QUE SE INSERTÓ EL REGISTRO          
    PRIMARY KEY(contacId)
);

-- TABLA DE DEPARTAMENTOS
CREATE TABLE departamento
(
    departId        DECIMAL(2,0) NOT NULL,                              -- NÚMERO IDENTIFICADOR DEL DEPARTAMENTO
    departNom       VARCHAR(40) NOT NULL,                               -- NOMBRE DEL DEPARTAMENTO
    PRIMARY KEY (departId)
);

-- TABLA DE CIUDADES
CREATE TABLE ciudad
(
    ciudadId           DECIMAL(5,0) NOT NULL,                           -- NÚMERO IDENTIFICADOR DE LA CIUDAD
    idDepart           DECIMAL(2,0) NOT NULL,                           -- FORÁNEA DEPARTAMENTO
    ciudadNom          VARCHAR(40) NOT NULL,                            -- NOMBRE DE LA CIUDAD, SOLO SE PUEDE INCLUIR FLORIDABLANCA, GIRÓN, NORTE Y PIEDECUESTA COMO CIUDADES
    precioDom          DECIMAL(5,0) NOT NULL DEFAULT 0,                 -- PRECIO QUE TENDRÁ EL DOMICILIO EN BUCARAMANGA O SU ÁREA METROPOLITANA
    usr_update         VARCHAR(15),                                     -- USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    usr_update_rol     VARCHAR(15),                                     -- ROL DEL USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    fec_update         TIMESTAMP,                                       -- FECHA EN LA QUE SE ACTUALIZÓ EL REGISTRO
    PRIMARY KEY (ciudadId),
    FOREIGN KEY (idDepart) REFERENCES departamento(departId)
);


-- TABLA DE PROVEEDORES
CREATE TABLE proveedor
(
    proveeNit          VARCHAR(10) NOT NULL,                            -- NIT DEL PROVEEDOR
    idCiudad           DECIMAL(5,0) NOT NULL,                           -- FORÁNEA CÓDIGO CIUDAD 
    proveeNom          VARCHAR(40) NOT NULL,                            -- NOMBRE DEL PROVEEDOR
    proveeDir          VARCHAR(80) NOT NULL,                            -- DIRECCIÓN DEL PROVEEDOR
    proveeTel          VARCHAR(10) NOT NULL,                            -- TELÉFONO DEL PROVEEDOR
    proveeEma          VARCHAR(50) NOT NULL,                            -- CORREO/EMAIL DEL PROVEEDOR
    proveeAct          BOOLEAN NOT NULL DEFAULT TRUE,                   -- INDICADOR DE PROVEEDOR ACTIVO TRUE O NO ACTIVO FALSE
    usr_insert         VARCHAR(15) NOT NULL,                            -- USUARIO QUIEN INSERTÓ EL REGISTRO
    usr_insert_rol     VARCHAR(15) NOT NULL,                            -- ROL DEL USUARIO QUIEN INSERTÓ EL REGISTRO
    fec_insert         TIMESTAMP NOT NULL DEFAULT NOW(),                -- FECHA EN LA QUE SE INSERTÓ EL REGISTRO
    usr_update         VARCHAR(15),                                     -- USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    usr_update_rol     VARCHAR(15),                                     -- ROL DEL USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    fec_update         TIMESTAMP,                                       -- FECHA EN LA QUE SE ACTUALIZÓ EL REGISTRO
    PRIMARY KEY (proveeNit),
    FOREIGN KEY (idCiudad) REFERENCES ciudad(ciudadId)
);


-- TABLA DE TIPOS DE PRODUCTOS
create table tipoproducto(
	tipoProId          DECIMAL(2,0) NOT NULL,                           -- NÚMERO IDENTIFICADOR DEL TIPO DE PRODUCTO
    tipoProNom         VARCHAR(30) NOT NULL,                            -- NOMBRE DEL TIPO DE PRODUCTO
    usr_insert         VARCHAR(15) NOT NULL,                            -- USUARIO QUIEN INSERTÓ EL REGISTRO
    usr_insert_rol     VARCHAR(15) NOT NULL,                            -- ROL DEL USUARIO QUIEN INSERTÓ EL REGISTRO
    fec_insert         TIMESTAMP NOT NULL DEFAULT NOW(),                -- FECHA EN LA QUE SE INSERTÓ EL REGISTRO
    usr_update         VARCHAR(15),                                     -- USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    usr_update_rol     VARCHAR(15),                                     -- ROL DEL USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    fec_update         TIMESTAMP,                                       -- FECHA EN LA QUE SE ACTUALIZÓ EL REGISTRO
    PRIMARY KEY(tipoProId)
);


-- TABLA DE LÍNEAS DE PRODUCTOS
create table linea(
	lineaId            DECIMAL(2,0) NOT NULL,                           -- NÚMERO IDENTIFICADOR DE LA LÍNEA
    lineaNom           VARCHAR(30) NOT NULL,                            -- NOMBRE DE LA LÍNEA
    usr_insert         VARCHAR(15) NOT NULL,                            -- USUARIO QUIEN INSERTÓ EL REGISTRO
    usr_insert_rol     VARCHAR(15) NOT NULL,                            -- ROL DEL USUARIO QUIEN INSERTÓ EL REGISTRO
    fec_insert         TIMESTAMP NOT NULL DEFAULT NOW(),                -- FECHA EN LA QUE SE INSERTÓ EL REGISTRO
    usr_update         VARCHAR(15),                                     -- USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    usr_update_rol     VARCHAR(15),                                     -- ROL DEL USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    fec_update         TIMESTAMP,                                       -- FECHA EN LA QUE SE ACTUALIZÓ EL REGISTRO
    PRIMARY KEY(lineaId)
);


-- TABLA DE MARCAS DE PRODUCTOS
create table marca(
	marcaId            DECIMAL(3,0) NOT NULL,                           -- NÚMERO IDENTIFICADOR DE LA MARCA
    marcaNom           VARCHAR(30) NOT NULL,                            -- NOMBRE DE LA MARCA
    usr_insert         VARCHAR(15) NOT NULL,                            -- USUARIO QUIEN INSERTÓ EL REGISTRO
    usr_insert_rol     VARCHAR(15) NOT NULL,                            -- ROL DEL USUARIO QUIEN INSERTÓ EL REGISTRO
    fec_insert         TIMESTAMP NOT NULL DEFAULT NOW(),                -- FECHA EN LA QUE SE INSERTÓ EL REGISTRO
    usr_update         VARCHAR(15),                                     -- USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    usr_update_rol     VARCHAR(15),                                     -- ROL DEL USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    fec_update         TIMESTAMP,                                       -- FECHA EN LA QUE SE ACTUALIZÓ EL REGISTRO
    PRIMARY KEY(marcaId)
);


-- TABLA DE ESTANTES PARA PRODUCTOS
create table estante(
    estantNom VARCHAR(2) NOT NULL,                                      -- NOMBRE DEL ESTANTE, DEBE SER UNA LETRA
    usr_insert         VARCHAR(15) NOT NULL,                            -- USUARIO QUIEN INSERTÓ EL REGISTRO
    usr_insert_rol     VARCHAR(15) NOT NULL,                            -- ROL DEL USUARIO QUIEN INSERTÓ EL REGISTRO
    fec_insert         TIMESTAMP NOT NULL DEFAULT NOW(),                -- FECHA EN LA QUE SE INSERTÓ EL REGISTRO
    usr_update         VARCHAR(15),                                     -- USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    usr_update_rol     VARCHAR(15),                                     -- ROL DEL USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    fec_update         TIMESTAMP,                                       -- FECHA EN LA QUE SE ACTUALIZÓ EL REGISTRO
    PRIMARY KEY(estantNom)
);

-- TABLA DE BANDEJA PARA PRODUCTOS
create table bandeja(                                   
    nomEstant  VARCHAR(2) NOT NULL,                                     -- FORÁNEA ESTANTE
    bandejaNum DECIMAL(2,0) NOT NULL,                                   -- NÚMERO DE LA BANDEJA
    usr_insert         VARCHAR(15) NOT NULL,                            -- USUARIO QUIEN INSERTÓ EL REGISTRO
    usr_insert_rol     VARCHAR(15) NOT NULL,                            -- ROL DEL USUARIO QUIEN INSERTÓ EL REGISTRO
    fec_insert         TIMESTAMP NOT NULL DEFAULT NOW(),                -- FECHA EN LA QUE SE INSERTÓ EL REGISTRO
    usr_update         VARCHAR(15),                                     -- USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    usr_update_rol     VARCHAR(15),                                     -- ROL DEL USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    fec_update         TIMESTAMP,                                       -- FECHA EN LA QUE SE ACTUALIZÓ EL REGISTRO
    PRIMARY KEY(nomEstant, bandejaNum),
    FOREIGN KEY (nomEstant) REFERENCES estante(estantNom)
);

-- TABLA DE SECCIONES PARA PRODUCTOS
create table seccion(
    nomEstant  VARCHAR(2) NOT NULL,                                     -- FORÁNEA ESTANTE
    numBandeja DECIMAL(2,0) NOT NULL,                                   -- FORÁNEA BANDEJA
    seccionCod VARCHAR(5) NOT NULL,                                     -- CÓDIGO DE LA SECCIÓN, DEBE SER UNA LETRA
    usr_insert         VARCHAR(15) NOT NULL,                            -- USUARIO QUIEN INSERTÓ EL REGISTRO
    usr_insert_rol     VARCHAR(15) NOT NULL,                            -- ROL DEL USUARIO QUIEN INSERTÓ EL REGISTRO
    fec_insert         TIMESTAMP NOT NULL DEFAULT NOW(),                -- FECHA EN LA QUE SE INSERTÓ EL REGISTRO
    usr_update         VARCHAR(15),                                     -- USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    usr_update_rol     VARCHAR(15),                                     -- ROL DEL USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    fec_update         TIMESTAMP,                                       -- FECHA EN LA QUE SE ACTUALIZÓ EL REGISTRO
    PRIMARY KEY(nomEstant, numBandeja, seccionCod),
    FOREIGN KEY (nomEstant, numBandeja) REFERENCES bandeja(nomEstant, bandejanum)
);

-- TABLA DE PRODUCTOS
CREATE TABLE producto
(
    producCod          VARCHAR(30) NOT NULL,                            -- CÓDIGO IDENTIFICADOR DEL PRODUCTO
    idTipoPro          DECIMAL(2,0) NOT NULL,                           -- FORÁNEA TIPO DE PRODUCTO
    idLinea            DECIMAL(2,0) NOT NULL,                           -- FORÁNEA LÍNEA
    idMarca            DECIMAL(3,0) NOT NULL,                           -- FORÁNEA MARCA
    nomEstant          VARCHAR(2),                                      -- FORÁNEA ESTANTE
    numBandeja         DECIMAL(2,0),                                    -- FORÁNEA BANDEJA
    codSeccion         VARCHAR(5),                                      -- FORÁNEA SECCIÓN
    producNom          VARCHAR(200) NOT NULL,                           -- NOMBRE DEL PRODUCTO
    producMod          VARCHAR(20) NOT NULL,                            -- MODELOS PARA LOS QUE SIRVE EL PRODUCTO
    producSto          DECIMAL(3,0) NOT NULL CHECK(producSto>=0),       -- NUMERO DE PRODUCTOS EN INVENTARIO / STOCK
    producPre          DECIMAL(8,0),                                    -- VALOR UNITARIO PARA VENTA DEL PRODUCTO
    producBod          BOOLEAN NOT NULL DEFAULT TRUE,                   -- INDICADOR DE PRODUCTO EN BODEGA PRINCIPAL
    producEst          BOOLEAN NOT NULL DEFAULT FALSE,                  -- INDICADOR DE PRODUCTO EN ZONA DE ESTANTES 
    producMos          BOOLEAN NOT NULL DEFAULT FALSE,                  -- INDICADOR DE PRODUCTO MOSTRARIO PARA CLIENTES  
    producAct          BOOLEAN NOT NULL DEFAULT TRUE,                   -- INDICADOR DE PRODUCTO ACTIVO TRUE O NO ACTIVO FALSE
    producMen          DECIMAL(6,0) NOT NULL DEFAULT 0,                 -- CONTADOR DE UNIDADES DE PRODUCTO QUE HAN SIDO DESCONTADAS A LA FUERZA
    usr_insert         VARCHAR(15) NOT NULL,                            -- USUARIO QUIEN INSERTÓ EL REGISTRO
    usr_insert_rol     VARCHAR(15) NOT NULL,                            -- ROL DEL USUARIO QUIEN INSERTÓ EL REGISTRO
    fec_insert         TIMESTAMP NOT NULL DEFAULT NOW(),                -- FECHA EN LA QUE SE INSERTÓ EL REGISTRO
    usr_update         VARCHAR(15),                                     -- USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    usr_update_rol     VARCHAR(15),                                     -- ROL DEL USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    fec_update         TIMESTAMP,                                       -- FECHA EN LA QUE SE ACTUALIZÓ EL REGISTRO
    PRIMARY KEY (producCod),
    FOREIGN KEY (idTipoPro) REFERENCES tipoproducto(tipoProId),
    FOREIGN KEY (idLinea) REFERENCES linea(lineaId),
    FOREIGN KEY (idMarca) REFERENCES marca(marcaId),
    FOREIGN KEY (nomEstant, numBandeja, codSeccion) REFERENCES seccion(nomEstant, numBandeja, seccionCod)
);

-- TABLA DE CLIENTES
CREATE TABLE cliente
(
    clientDoc          VARCHAR(10) NOT NULL,                            -- DOCUMENTO IDENTIFICADOR DEL CLIENTE. TAMBIÉN ES SU USUARIO PARA LOGEARSE
    idCiudad           DECIMAL(5,0) NOT NULL,                           -- FORÁNEA CIUDAD
    clientNom          VARCHAR(50) NOT NULL,                            -- NOMBRE DEL CLIENTE
    clientDir          VARCHAR(80) NOT NULL,                            -- DIRECCIÓN DEL CLIENTE
    clientTel          VARCHAR(10) NOT NULL,                            -- TELÉFONO DEL CLIENTE
    clientEma          VARCHAR(50) NOT NULL,                            -- EMAIL/ CORREO DEL CLIENTE
    clientCon          VARCHAR(300) NOT NULL,                           -- CONTRASEÑA DEL CLIENTE PARA LOGEARSE
    clientPun          DECIMAL(5,0) NOT NULL DEFAULT 0,                 -- PUNTOS POR COMPRAS. POR CADA 1000 PESOS SE LE DARÁ 1 PUNTO AL CLIENTE
    clientAct          BOOLEAN NOT NULL DEFAULT TRUE,                   -- INDICADOR DE CLIENTE ACTIVO TRUE O NO ACTIVO FALSE
    sesionActiva       BOOLEAN NOT NULL DEFAULT FALSE,                  -- INDICADOR DE SESIÓN ACTIVA
    usr_insert         VARCHAR(15) NOT NULL,                            -- USUARIO QUIEN INSERTÓ EL REGISTRO
    usr_insert_rol     VARCHAR(15) NOT NULL,                            -- ROL DEL USUARIO QUIEN INSERTÓ EL REGISTRO
    fec_insert         TIMESTAMP NOT NULL DEFAULT NOW(),                -- FECHA EN LA QUE SE INSERTÓ EL REGISTRO
    usr_update         VARCHAR(15),                                     -- USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    usr_update_rol     VARCHAR(15),                                     -- ROL DEL USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    fec_update         TIMESTAMP,                                       -- FECHA EN LA QUE SE ACTUALIZÓ EL REGISTRO
    PRIMARY KEY (clientDoc),
    FOREIGN KEY (idCiudad) REFERENCES ciudad(ciudadId)
);

-- TABLA DE USUARIOS (MENSAJEROS, VENDEDORES, BODEGUEROS)
CREATE TABLE usuario
(
    usuarioDoc          VARCHAR(10) NOT NULL,                           -- DOCUMENTO IDENTIFICADOR DEL USUARIO. TAMBIÉN ES SU USUARIO PARA LOGEARSE
    usuarioRol          VARCHAR(9) NOT NULL,                            -- ROL DEL USUARIO EN EL SISTEMA
    usuarioNom          VARCHAR(50) NOT NULL,                           -- NOMBRE DEL USUARIO
    usuarioDir          VARCHAR(80) NOT NULL,                           -- DIRECCIÓN DEL USUARIO
    usuarioTel          VARCHAR(10) NOT NULL,                           -- TELÉFONO DEL USUARIO
    usuarioEma          VARCHAR(30) NOT NULL,                           -- EMAIL/ CORREO DEL USUARIO
    usuarioCon          VARCHAR(300) NOT NULL,                          -- CONTRASEÑA DEL USUARIO PARA LOGEARSE
    usuarioAct          BOOLEAN NOT NULL DEFAULT TRUE,                  -- INDICADOR DE USUARIO ACTIVO TRUE O NO ACTIVO FALSE
    sesionActiva        BOOLEAN NOT NULL DEFAULT FALSE,                 -- INDICADOR DE SESIÓN ACTIVA
    usr_insert          VARCHAR(15) NOT NULL,                           -- USUARIO QUIEN INSERTÓ EL REGISTRO
    usr_insert_rol      VARCHAR(15) NOT NULL,                           -- ROL DEL USUARIO QUIEN INSERTÓ EL REGISTRO
    fec_insert          TIMESTAMP NOT NULL DEFAULT NOW(),               -- FECHA EN LA QUE SE INSERTÓ EL REGISTRO
    usr_update          VARCHAR(15),                                    -- USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    usr_update_rol      VARCHAR(15),                                    -- ROL DEL USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    fec_update          TIMESTAMP,                                      -- FECHA EN LA QUE SE ACTUALIZÓ EL REGISTRO
    PRIMARY KEY (usuarioDoc, usuarioRol)
);


-- TABLA PARA LA VENTA
CREATE TABLE venta
(
    ventaNum        DECIMAL(5,0) NOT NULL,                             -- NÚMERO IDENTIFICADOR DE LA VENTA
    docClient       VARCHAR(10) NOT NULL,                              -- FORÁNEA DOCUMENTO CLIENTE
    departamento    VARCHAR(40) NOT NULL,                              -- DEPARTAMENTO DEL CLIENTE
    ciudad          VARCHAR(40) NOT NULL,                              -- CIUDAD DEL CLIENTE
    tipopago        VARCHAR(20) NOT NULL,                              -- MODO DE PAGO
    ventaRutFac     VARCHAR(50) DEFAULT NULL,                          -- RUTA DEL DESTINO DE LA FACTURA
    ventaRec        BOOLEAN NOT NULL DEFAULT FALSE,                    -- EL VALOR DE LA VENTA FUE RECAUDADO O NO
	ventaPlaRec     TIMESTAMP NOT NULL DEFAULT NOW(),                  -- PLAZO PARA RECAUDAR EL VALOR DE LA VENTA
    ventaRutRec     VARCHAR(50) DEFAULT NULL,                          -- RUTA DEL DESTINO DEL COBRO DE LA FACTURA, SI ES EN TARJETA O TRANSFERENCIA BANCO
    ventaDom        BOOLEAN NOT NULL DEFAULT FALSE,                    -- CLIENTE REQUIERE DOMICILIO O NO
    ventaCan        BOOLEAN NOT NULL DEFAULT FALSE,                    -- INDICADOR DE VENTA CANCELADA TRUE O NO CANCELADA FALSE
    usr_insert         VARCHAR(15) NOT NULL,                            -- USUARIO QUIEN INSERTÓ EL REGISTRO
    usr_insert_rol     VARCHAR(15) NOT NULL,                            -- ROL DEL USUARIO QUIEN INSERTÓ EL REGISTRO
    fec_insert         TIMESTAMP NOT NULL DEFAULT NOW(),                -- FECHA EN LA QUE SE INSERTÓ EL REGISTRO
    usr_update         VARCHAR(15),                                     -- USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    usr_update_rol     VARCHAR(15),                                     -- ROL DEL USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    fec_update         TIMESTAMP,                                       -- FECHA EN LA QUE SE ACTUALIZÓ EL REGISTRO
    PRIMARY KEY (ventaNum),
    FOREIGN KEY (docClient) REFERENCES cliente(clientDoc)
);

-- TABLA PARA EL DETALLL DE LA VENTA
CREATE TABLE detalleventa
(
    numVenta            DECIMAL(5,0) NOT NULL,                         -- FORÁNEA NÚMERO VENTA
    codProduc           VARCHAR(30) NOT NULL,                          -- FORÁNEA CODIGO PRODUCTO
    detVentaCan         DECIMAL(3,0) NOT NULL,                         -- CANTIDAD DE PRODUCTO DEL DETALLE DE LA VENTA
    precioProduc        DECIMAL(8,0) NOT NULL,                         -- VALOR UNITARIO PARA VENTA DEL PRODUCTO
    detVentaDes         DECIMAL(6,0) NOT NULL,                         -- DESCUENTO APLICADO AL PRODUCTO
    detVentaValPar      DECIMAL(8,0) NOT NULL,                         -- VALOR PARCIAL MONETARIO DEL DETALLE DE LA VENTA
    usr_insert         VARCHAR(15) NOT NULL,                            -- USUARIO QUIEN INSERTÓ EL REGISTRO
    usr_insert_rol     VARCHAR(15) NOT NULL,                            -- ROL DEL USUARIO QUIEN INSERTÓ EL REGISTRO
    fec_insert         TIMESTAMP NOT NULL DEFAULT NOW(),                -- FECHA EN LA QUE SE INSERTÓ EL REGISTRO
    usr_update         VARCHAR(15),                                     -- USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    usr_update_rol     VARCHAR(15),                                     -- ROL DEL USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    fec_update         TIMESTAMP,                                       -- FECHA EN LA QUE SE ACTUALIZÓ EL REGISTRO
    PRIMARY KEY (numVenta, codProduc),
    FOREIGN KEY (numVenta) REFERENCES venta(ventaNum) ON DELETE CASCADE,
    FOREIGN KEY (codProduc) REFERENCES producto(producCod)
);

-- TABLA DE REDENCIÓN DE PUNTOS DEL CLIENTE
CREATE TABLE redencionpuntos
(
    redencNum          DECIMAL(2,0) NOT NULL,                          -- NÚMERO IDENTIFICADOR DE LA REDENCIÓN DE PUNTOS DEL CLIENTE
    numVenta           DECIMAL(5,0) NOT NULL,                          -- FORÁNEA VENTA
    redencPunRed       DECIMAL(2,0) NOT NULL,                          -- CANTIDAD DE PUNTOS REDIMIDOS POR EL CLIENTE
    redencDes          BOOLEAN NOT NULL,                               -- INDICADOR DE REDENCIÓN DESCUENTO TRUE Y SI NO, ES DOMICILIO FALSE
    usr_insert         VARCHAR(15) NOT NULL,                            -- USUARIO QUIEN INSERTÓ EL REGISTRO
    usr_insert_rol     VARCHAR(15) NOT NULL,                            -- ROL DEL USUARIO QUIEN INSERTÓ EL REGISTRO
    fec_insert         TIMESTAMP NOT NULL DEFAULT NOW(),                -- FECHA EN LA QUE SE INSERTÓ EL REGISTRO
    usr_update         VARCHAR(15),                                     -- USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    usr_update_rol     VARCHAR(15),                                     -- ROL DEL USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    fec_update         TIMESTAMP,                                       -- FECHA EN LA QUE SE ACTUALIZÓ EL REGISTRO
    PRIMARY KEY (redencNum),
    FOREIGN KEY (numVenta) REFERENCES venta(ventaNum)
);

-- TABLA PARA EMPRESA DE TRANSPORTE
CREATE TABLE empresatransporte
(
    empreTraNit         VARCHAR(10) NOT NULL,                           -- NIT DE LA EMPRESA DE TRANSPORTE
    empreTraNom         VARCHAR(25) NOT NULL,                           -- NOMBRE DE LA EMPRESA DE TRANSPORTE
    empreTraTel         VARCHAR(10) NOT NULL,                           -- TELÉFONO DE LA EMPRESA DE TRANSPORTE
    empreTraAct         BOOLEAN NOT NULL DEFAULT TRUE,                  -- INDICADOR DE EMPRESA ACTIVA TRUE O NO ACTIVA FALSE
    usr_insert         VARCHAR(15) NOT NULL,                            -- USUARIO QUIEN INSERTÓ EL REGISTRO
    usr_insert_rol     VARCHAR(15) NOT NULL,                            -- ROL DEL USUARIO QUIEN INSERTÓ EL REGISTRO
    fec_insert         TIMESTAMP NOT NULL DEFAULT NOW(),                -- FECHA EN LA QUE SE INSERTÓ EL REGISTRO
    usr_update         VARCHAR(15),                                     -- USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    usr_update_rol     VARCHAR(15),                                     -- ROL DEL USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    fec_update         TIMESTAMP,                                       -- FECHA EN LA QUE SE ACTUALIZÓ EL REGISTRO
    PRIMARY KEY (empreTraNit)
);

CREATE TABLE envio
(
    envioNum                DECIMAL(7,0) NOT NULL,                          -- NÚMERO IDENTIFICADOR DEL ENVÍO
    numVenta                DECIMAL(5,0) NOT NULL,                          -- FORÁNEA VENTA
    docUsuario	            VARCHAR(10) NULL DEFAULT NULL,                  -- FORÁNEA MENSAJERO
    rolUsuario              VARCHAR(15) NULL DEFAULT NULL,                  -- FORÁNEA ROL MENSAJERO
    idCiudad                DECIMAL(5,0) NOT NULL,                          -- FORÁNEA MUNICIPIO DE DESTINO
    nitEmpreTra             VARCHAR(10) DEFAULT NULL,                       -- FORÁNEA EMPRESA TRANSPORTE
    envioDocDes             VARCHAR(10) NOT NULL,                           -- DOCUMENTO DEL DESTINARIO DEL ENVÍO
    envioNomDes             VARCHAR(50) NOT NULL,                           -- NOMBRE DEL DESTINARIO DEL ENVÍO
    envioDirDes             VARCHAR(80) NOT NULL,                           -- DIRECCIÓN DE DESTINO DEL ENVÍO
    envioTelDes             VARCHAR(10) NOT NULL,                           -- TELÉFONO DEL DESTINARIO DEL ENVÍO
    envioPre                DECIMAL(5,0) NOT NULL,                          -- PRECIO DEL ENVÍO
    envioObs                VARCHAR(150) DEFAULT NULL,                      -- OBSERVACIONES DEL ENVÍO
    envioSal                BOOLEAN NOT NULL DEFAULT FALSE,                 -- INDICADOR DE SALIDA DEL ENVÍO. SALIÓ TRUE, NO SALIÓ FALSE
    fec_salida              TIMESTAMP NULL DEFAULT NULL,                    -- FECHA EN LA QUE SE SALIÓ EL ENVÍO
    envioEnt                BOOLEAN NOT NULL DEFAULT FALSE,                 -- INDICADOR DE ENTREGA DEL ENVÍO. ENTREGADO TRUE, NO ENTREGADO FALSE
    fec_entrega             TIMESTAMP NULL DEFAULT NULL,                    -- FECHA EN LA QUE SE ENTREGÓ EL ENVÍO
    envioRut                VARCHAR(50) DEFAULT NULL,                       -- RUTA DE ACCESO A GUÍA DE ENVÍO NACIONAL
    usr_insert              VARCHAR(15) NOT NULL,                           -- USUARIO QUIEN INSERTÓ EL REGISTRO
    usr_insert_rol          VARCHAR(15) NOT NULL,                           -- ROL DEL USUARIO QUIEN INSERTÓ EL REGISTRO
    fec_insert              TIMESTAMP NOT NULL DEFAULT NOW(),               -- FECHA EN LA QUE SE INSERTÓ EL REGISTRO
    usr_update              VARCHAR(15),                                    -- USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    usr_update_rol          VARCHAR(15),                                    -- ROL DEL USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    fec_update              TIMESTAMP,                                      -- FECHA EN LA QUE SE ACTUALIZÓ EL REGISTRO 
    PRIMARY KEY (envioNum),
    FOREIGN KEY (numVenta) REFERENCES venta(ventaNum),
	FOREIGN KEY (docUsuario, rolUsuario) REFERENCES usuario(usuarioDoc, usuarioRol),
    FOREIGN KEY (idCiudad) REFERENCES ciudad(ciudadId),
    FOREIGN KEY (nitEmpreTra) REFERENCES empresatransporte(empreTraNit)
);

-- TABLA DE PEDIDO A PROVEEDOR
CREATE TABLE pedidoproveedor
(
    pedidoNum               DECIMAL(5,0) NOT NULL,                       -- NÚMERO IDENTIFICADOR DEL PEDIDO AL PROVEEDOR
    nitProvee               VARCHAR(10) NOT NULL,                        -- FORÁNEA PROVEEDOR
    tipopago                VARCHAR(20) NOT NULL,                        -- MODO DE PAGO
    pedidoTotal             DECIMAL(9,0) NOT NULL,                       -- VALOR TOTAL DEL PEDIDO
    pedidoIva               DECIMAL(9,0) NOT NULL,                       -- VALOR DEL IVA DEL PEDIDO
    pedidoRutPag            VARCHAR(50) DEFAULT NULL,                    -- RUTA DE ACCESO AL VOUCHER DE PAGO AL PROVEEDOR
    pedidoPag               BOOLEAN NOT NULL,                            -- EL PEDIDO FUE PAGADO AL PROVEEDOR TRUE, SI NO FALSE
	PagoPlazo               TIMESTAMP NOT NULL DEFAULT NOW(),            -- PLAZO PARA PAGAR EL VALOR DEL PEDID.
    usr_insert         VARCHAR(15) NOT NULL,                            -- USUARIO QUIEN INSERTÓ EL REGISTRO
    usr_insert_rol     VARCHAR(15) NOT NULL,                            -- ROL DEL USUARIO QUIEN INSERTÓ EL REGISTRO
    fec_insert         TIMESTAMP NOT NULL DEFAULT NOW(),                -- FECHA EN LA QUE SE INSERTÓ EL REGISTRO
    usr_update         VARCHAR(15),                                     -- USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    usr_update_rol     VARCHAR(15),                                     -- ROL DEL USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    fec_update         TIMESTAMP,                                       -- FECHA EN LA QUE SE ACTUALIZÓ EL REGISTRO
    PRIMARY KEY (pedidoNum, nitProvee),
    FOREIGN KEY (nitProvee) REFERENCES proveedor(proveeNit)
);

-- TABLA PARA EL DETALLE DEL PEDIDO
CREATE TABLE detallepedido
(
    numPedido               DECIMAL(5,0) NOT NULL,                       -- FORÁNEA NÚMERO PEDIDO
    nitProvee               VARCHAR(10) NOT NULL,                        -- FORÁNEA PROVEEDOR
    codProduc               VARCHAR(30) NOT NULL,                        -- FORÁNEA CODIGO PRODUCTO
    detPedCan               DECIMAL(3,0) NOT NULL,                       -- CANTIDAD DE PRODUCTO DEL DETALLE DEL PEDIDO
    detPedCos               DECIMAL(7,0) NOT NULL,                       -- COSTO UNITARIO DEL PRODUCTO
    detPedValPar            DECIMAL(8,0) NOT NULL,                       -- VALOR PARCIAL MONETARIO DEL DETALLE DEL PEDIDO
    usr_insert         VARCHAR(15) NOT NULL,                             -- USUARIO QUIEN INSERTÓ EL REGISTRO
    usr_insert_rol     VARCHAR(15) NOT NULL,                             -- ROL DEL USUARIO QUIEN INSERTÓ EL REGISTRO
    fec_insert         TIMESTAMP NOT NULL DEFAULT NOW(),                 -- FECHA EN LA QUE SE INSERTÓ EL REGISTRO
    usr_update         VARCHAR(15),                                      -- USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    usr_update_rol     VARCHAR(15),                                      -- ROL DEL USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    fec_update         TIMESTAMP,                                        -- FECHA EN LA QUE SE ACTUALIZÓ EL REGISTRO
    PRIMARY KEY (numPedido, nitProvee, codProduc),
    FOREIGN KEY (numPedido, nitProvee) REFERENCES pedidoproveedor(pedidoNum, nitProvee),
    FOREIGN KEY (codProduc) REFERENCES producto(producCod)  
);


--Función para actualización de tablas

--CREATE OR REPLACE FUNCTION fun_actualizacion_tabla() RETURNS TRIGGER AS 
--$$
    --BEGIN
        --IF TG_OP = 'INSERT' THEN
        --NEW.usr_insert = CURRENT_USER;
        --NEW.fec_insert = NOW();
        --END IF;
        --IF TG_OP = 'UPDATE' THEN
           -- NEW.usr_update = CURRENT_USER;
           -- NEW.fec_update = NOW();
       -- END IF;
      --  RETURN NEW;
   -- END;
--$$
--LANGUAGE PLPGSQL;

--DML PRUEBA DE ARRANQUE

INSERT INTO parametros VALUES('123', 'LA CASA DE LA AMAROK', 'Dirección Ejemplo', '6076711721', '3184790508', 'amarok@gmail.com', 1000, 4000, -1000, 19, 2000, 1000, MD5('admin123'), 20);

INSERT INTO excepciones VALUES('01000', 'Advertencia');
INSERT INTO excepciones VALUES('0100C', 'Conjuntos de resultados dinámicos devueltos');
INSERT INTO excepciones VALUES('01008', 'Relleno implícito de cero bits');
INSERT INTO excepciones VALUES('01003', 'Valor nulo eliminado en la función set');
INSERT INTO excepciones VALUES('01007', 'Privilegio no concedido');
INSERT INTO excepciones VALUES('01006', 'Privilegio no revocado');
INSERT INTO excepciones VALUES('01004', 'Truncamiento a la derecha de datos de cadena');
INSERT INTO excepciones VALUES('01P01', 'Características obsoletas');
INSERT INTO excepciones VALUES('02000', 'Sin datos');
INSERT INTO excepciones VALUES('02001', 'No se devuelven conjuntos de resultados dinámicos adicionales');
INSERT INTO excepciones VALUES('03000', 'Declaración SQL aún no completa');
INSERT INTO excepciones VALUES('08000', 'Excepción de conexión');
INSERT INTO excepciones VALUES('08003', 'La conexión no existe');
INSERT INTO excepciones VALUES('08006', 'Fallo de conexión');
INSERT INTO excepciones VALUES('08001', 'Sqlclient no puede establecer la conexión sql');

INSERT INTO excepciones VALUES('08004', 'El servidor SQL rechazó el establecimiento de SQLConnection.');
INSERT INTO excepciones VALUES('08007', 'Resolución de transacción desconocida');
INSERT INTO excepciones VALUES('08P01', 'Violación del protocolo');
INSERT INTO excepciones VALUES('09000', 'Excepción de acción desencadenada');
INSERT INTO excepciones VALUES('0A000', 'Característica no compatible');
INSERT INTO excepciones VALUES('0B000', 'Inicio de transacción no válida');
INSERT INTO excepciones VALUES('0F000', 'Excepción del localizador');
INSERT INTO excepciones VALUES('0F001', 'Especificación de localizador no válida');
INSERT INTO excepciones VALUES('0L000', 'Otorgante inválido');
INSERT INTO excepciones VALUES('0LP01', 'Operación de concesión no válida');
INSERT INTO excepciones VALUES('0P000', 'Especificación de rol no válida');
INSERT INTO excepciones VALUES('0Z000', 'Excepción de diagnóstico');
INSERT INTO excepciones VALUES('0Z002', 'Se accede a diagnósticos apilados sin controlador activo.');
INSERT INTO excepciones VALUES('20000', 'Caso no encontrado');
INSERT INTO excepciones VALUES('21000', 'Violación de cardinalidad');
INSERT INTO excepciones VALUES('22000', 'Excepción de datos');
INSERT INTO excepciones VALUES('2202E', 'Error de subíndice de matriz');
INSERT INTO excepciones VALUES('22021', 'Caracter que no está en el repertorio');
INSERT INTO excepciones VALUES('22008', 'Desbordamiento del campo de fecha y hora');
INSERT INTO excepciones VALUES('22012', 'División por zero');
INSERT INTO excepciones VALUES('22005', 'Error en la asignación');
INSERT INTO excepciones VALUES('2200B', 'Conflicto con caracter de escape');
INSERT INTO excepciones VALUES('22022', 'Desbordamiento del indicador');
INSERT INTO excepciones VALUES('22015', 'Desbordamiento del campo de intervalo');
INSERT INTO excepciones VALUES('2201E', 'Argumento inválido para logaritmo');
INSERT INTO excepciones VALUES('22014', 'Argumento no válido para la función ntile');
INSERT INTO excepciones VALUES('22016', 'Argumento no válido para la función de enésimo valor');
INSERT INTO excepciones VALUES('2201F', 'Argumento no válido para la función de potencia');
INSERT INTO excepciones VALUES('2201G', 'Argumento no válido para la función de depósito de ancho');
INSERT INTO excepciones VALUES('22018', 'Valor de caracter no válido para el casteo');
INSERT INTO excepciones VALUES('22007', 'Formato de fecha y hora no válido');
INSERT INTO excepciones VALUES('22019', 'Carácter de escape no válido');
INSERT INTO excepciones VALUES('2200D', 'Octeto de escape no válido');
INSERT INTO excepciones VALUES('22025', 'Secuencia de escape no váida');
INSERT INTO excepciones VALUES('22P06', 'Uso no estándar del carácter de escape');
INSERT INTO excepciones VALUES('22010', 'Valor de parámetro de indicador no válido');
INSERT INTO excepciones VALUES('22023', 'Valor de parámetro no válido');
INSERT INTO excepciones VALUES('22013', 'Tamaño anterior o siguiente no válido');
INSERT INTO excepciones VALUES('2201B', 'Expresión regular no válida');
INSERT INTO excepciones VALUES('2201W', 'Recuento de filas no válido en la cláusula de límite');
INSERT INTO excepciones VALUES('2201X', 'Recuento de filas no válido en la cláusula de compensación de resultados');
INSERT INTO excepciones VALUES('2202H', 'Argumento de muestra de tabla no válido');
INSERT INTO excepciones VALUES('2202G', 'Repetición de muestra de tabla no válida');
INSERT INTO excepciones VALUES('22009', 'Valor de desplazamiento de zona horaria no válido');
INSERT INTO excepciones VALUES('2200C', 'Uso no válido del carácter de escape');
INSERT INTO excepciones VALUES('2200G', 'El tipo más específico no coincide');
INSERT INTO excepciones VALUES('22004', 'Valor nulo no permitido');
INSERT INTO excepciones VALUES('22002', 'Valor nulo sin parámetro indicador');
INSERT INTO excepciones VALUES('22003', 'Valor numérico fuera de rango');
INSERT INTO excepciones VALUES('2200H', 'Límite del generador de secuencia excedido');
INSERT INTO excepciones VALUES('22026', 'La longitud de los datos de la cadena no coincide');

INSERT INTO excepciones VALUES('22001', 'Truncamiento a la derecha de datos de cadena');
INSERT INTO excepciones VALUES('22011', 'Error de subcadena');
INSERT INTO excepciones VALUES('22027', 'Error de recorte');
INSERT INTO excepciones VALUES('22024', 'Cadena c sin terminar');
INSERT INTO excepciones VALUES('2200F', 'Cadena de caracteres de longitud cero');
INSERT INTO excepciones VALUES('22P01', 'Excepción de punto flotante');
INSERT INTO excepciones VALUES('22P02', 'Representación de texto no válida');
INSERT INTO excepciones VALUES('22P03', 'Representación binaria no válida');
INSERT INTO excepciones VALUES('22P04', 'Formato de archivo de copia incorrecto');
INSERT INTO excepciones VALUES('22P05', 'Caracter intraducible');
INSERT INTO excepciones VALUES('2200L', 'No es un documento xml');
INSERT INTO excepciones VALUES('2200M', 'Documento xml no válido');
INSERT INTO excepciones VALUES('2200N', 'Contenido xml no válido');
INSERT INTO excepciones VALUES('2200S', 'Comentario xml no válido');
INSERT INTO excepciones VALUES('2200T', 'Instrucción de procesamiento xml no válida');
INSERT INTO excepciones VALUES('22030', 'Valor de llave de objeto JSON duplicada');
INSERT INTO excepciones VALUES('22031', 'Argumento no válido para la función de fecha y hora de SQL JSON');
INSERT INTO excepciones VALUES('22032', 'Texto JSON no válido');
INSERT INTO excepciones VALUES('22033', 'Subíndice JSON SQL no válido');
INSERT INTO excepciones VALUES('22034', 'Más de un elemento JSON SQL');
INSERT INTO excepciones VALUES('22035', 'Ningún elemento JSON SQL');
INSERT INTO excepciones VALUES('22036', 'Elemento JSON SQL no numérico');
INSERT INTO excepciones VALUES('22037', 'Claves no únicas en un objeto json');
INSERT INTO excepciones VALUES('22038', 'Elemento singleton sql json requerido');
INSERT INTO excepciones VALUES('22039', 'Arreglo JSON SQL no encontrado');

INSERT INTO excepciones VALUES('2203A', 'Miembro JSON SQL no encontrado');
INSERT INTO excepciones VALUES('2203B', 'Número JSON SQL no encontrado');
INSERT INTO excepciones VALUES('2203C', 'Objeto JSON SQL no encontrado');
INSERT INTO excepciones VALUES('2203D', 'Demasiados arreglos de elementos JSON');
INSERT INTO excepciones VALUES('2203E', 'Demasiados arreglos de miembros JSON');
INSERT INTO excepciones VALUES('2203F', 'Se requiere escalar JSON SQL');
INSERT INTO excepciones VALUES('2203G', 'El elemento SQL JSON no se puede convertir al tipo de destino');

INSERT INTO excepciones VALUES('23000', 'Violación de la restricción de integridad');
INSERT INTO excepciones VALUES('23001', 'Restringir la violación');
INSERT INTO excepciones VALUES('23502', 'Violación de no nulo');
INSERT INTO excepciones VALUES('23503', 'Violación de llave foránea');
INSERT INTO excepciones VALUES('23505', 'Violación de llave única');
INSERT INTO excepciones VALUES('23514', 'Violación de chequeo');
INSERT INTO excepciones VALUES('23P01', 'Violación de exclusión');
INSERT INTO excepciones VALUES('24000', 'Estatus de cursor no válido');
INSERT INTO excepciones VALUES('25000', 'Estatus de transacción no válido');
INSERT INTO excepciones VALUES('25001', 'Transacción sql activa');
INSERT INTO excepciones VALUES('25002', 'Transacción de sucursal ya activa');
INSERT INTO excepciones VALUES('25008', 'El cursor sostenido requiere el mismo nivel de aislamiento');
INSERT INTO excepciones VALUES('25003', 'Modo de acceso inadecuado para transacciones en sucursales');
INSERT INTO excepciones VALUES('25004', 'Nivel de aislamiento inadecuado para transacciones en sucursales');
INSERT INTO excepciones VALUES('25006', 'Transacción sql de solo lectura');
INSERT INTO excepciones VALUES('25007', 'No se admite la combinación de esquema y declaración de datos.');
INSERT INTO excepciones VALUES('25P01', 'Transacción sql no activa');
INSERT INTO excepciones VALUES('25P02', 'En transacción sql fallida');

INSERT INTO excepciones VALUES('25P03', 'Inactivo en el tiempo de espera de la sesión de transacción');
INSERT INTO excepciones VALUES('26000', 'Nombre de declaración sql no válido');
INSERT INTO excepciones VALUES('27000', 'Infracción de cambio de datos desencadenada');
INSERT INTO excepciones VALUES('28000', 'Especificación de autorización no válida');
INSERT INTO excepciones VALUES('28P01', 'Contraseña no válida');
INSERT INTO excepciones VALUES('2B000', 'Los descriptores de privilegios dependientes todavía existen');
INSERT INTO excepciones VALUES('2BP01', 'Los objetos dependientes todavía existen');
INSERT INTO excepciones VALUES('2D000', 'Finalización de transacción no válida');
INSERT INTO excepciones VALUES('2F000', 'Excepción de rutina sql');
INSERT INTO excepciones VALUES('2F005', 'Función ejecutada sin declaración de retorno');
INSERT INTO excepciones VALUES('2F002', 'Modificación de datos sql no permitida');
INSERT INTO excepciones VALUES('2F003', 'Intento de declaración sql no permitida');
INSERT INTO excepciones VALUES('2F004', 'Lectura de datos sql no permitida');
INSERT INTO excepciones VALUES('34000', 'Nombre de cursor no válido');
INSERT INTO excepciones VALUES('38000', 'Excepción de rutina externa');
INSERT INTO excepciones VALUES('38001', 'Contiene sql no permitido');
INSERT INTO excepciones VALUES('38002', 'Modificación de datos sql no permitida');
INSERT INTO excepciones VALUES('38003', 'Intento de declaración sql prohibida');
INSERT INTO excepciones VALUES('38004', 'Lectura de datos sql no permitida');
INSERT INTO excepciones VALUES('39000', 'Excepción en la invocación de rutina externa');
INSERT INTO excepciones VALUES('39001', 'Sqlstate devuelto no válido');
INSERT INTO excepciones VALUES('39004', 'Valor nulo no permitido');
INSERT INTO excepciones VALUES('39P01', 'Protocolo de activación violado');
INSERT INTO excepciones VALUES('39P02', 'Protocolo srf violado');
INSERT INTO excepciones VALUES('39P03', 'Protocolo de activación de eventos violado');

INSERT INTO excepciones VALUES('3B000', 'Excepción de punto de guardado');
INSERT INTO excepciones VALUES('3B001', 'Especificación de punto de guardado no válida');
INSERT INTO excepciones VALUES('3D000', 'Nombre de catálogo no válido');
INSERT INTO excepciones VALUES('3F000', 'Nombre de esquema no válido');
INSERT INTO excepciones VALUES('40000', 'Reversión de transacciones');
INSERT INTO excepciones VALUES('40002', 'Violación de la restricción de integridad de la transacción');
INSERT INTO excepciones VALUES('40001', 'Error de serialización');
INSERT INTO excepciones VALUES('40003', 'Finalización de la declaración desconocida');
INSERT INTO excepciones VALUES('40P01', 'Punto muerto detectado');
INSERT INTO excepciones VALUES('42000', 'Error de sintaxis o infracción de regla de acceso');
INSERT INTO excepciones VALUES('42601', 'Error de sintaxis');
INSERT INTO excepciones VALUES('42501', 'Privilegios insuficientes');
INSERT INTO excepciones VALUES('42846', 'No puede coaccionar');
INSERT INTO excepciones VALUES('42803', 'Error de agrupación');
INSERT INTO excepciones VALUES('42P20', 'Error de ventana');
INSERT INTO excepciones VALUES('42P19', 'Recursión no válida');
INSERT INTO excepciones VALUES('42830', 'Llave foránea no válida');
INSERT INTO excepciones VALUES('42602', 'Nombre no válido');
INSERT INTO excepciones VALUES('42622', 'Nombre demasiado largo');

INSERT INTO excepciones VALUES('42939', 'Nombre reservado');
INSERT INTO excepciones VALUES('42804', 'El tipo de dato no coincide');
INSERT INTO excepciones VALUES('42P18', 'Tipo de dato no determinado');
INSERT INTO excepciones VALUES('42P21', 'Desajuste de colación');
INSERT INTO excepciones VALUES('42P22', 'Colación no determinada');
INSERT INTO excepciones VALUES('42809', 'Tipo de objeto erróneo');
INSERT INTO excepciones VALUES('428C9', 'Generado siempre');
INSERT INTO excepciones VALUES('42703', 'Columna no definida');
INSERT INTO excepciones VALUES('42883', 'Función no definida');
INSERT INTO excepciones VALUES('42P01', 'Tabla no definida');
INSERT INTO excepciones VALUES('42P02', 'Parámetro no definido');
INSERT INTO excepciones VALUES('42704', 'Objeto no definido');
INSERT INTO excepciones VALUES('42701', 'Columna duplicada');
INSERT INTO excepciones VALUES('42P03', 'Cursor duplicado');
INSERT INTO excepciones VALUES('42P04', 'Base de datos duplicada');
INSERT INTO excepciones VALUES('42723', 'Función duplicada');
INSERT INTO excepciones VALUES('42P05', 'Declaración preparada duplicada');
INSERT INTO excepciones VALUES('42P06', 'Esquema duplicado');
INSERT INTO excepciones VALUES('42P07', 'Tabla duplicada');
INSERT INTO excepciones VALUES('42712', 'Alias duplicado');

INSERT INTO excepciones VALUES('42710', 'Objeto duplicado');
INSERT INTO excepciones VALUES('42702', 'Columna ambigua');
INSERT INTO excepciones VALUES('42725', 'Función ambigua');
INSERT INTO excepciones VALUES('42P08', 'Parámetro ambiguo');
INSERT INTO excepciones VALUES('42P09', 'Alias ambiguo');
INSERT INTO excepciones VALUES('42P10', 'Referencia de columna no válida');
INSERT INTO excepciones VALUES('42611', 'Definición de columna no válida');
INSERT INTO excepciones VALUES('42P11', 'Definición de cursor no válida');
INSERT INTO excepciones VALUES('42P12', 'Definición de base de datos no válida');
INSERT INTO excepciones VALUES('42P13', 'Definición de función no válida');
INSERT INTO excepciones VALUES('42P14', 'Definición de declaración preparada no válida');
INSERT INTO excepciones VALUES('42P15', 'Definición de esquema no válida');
INSERT INTO excepciones VALUES('42P16', 'Definición de tabla no válida');
INSERT INTO excepciones VALUES('42P17', 'Definición de objeto no válida');
INSERT INTO excepciones VALUES('44000', 'Con violación de opción de verificación');
INSERT INTO excepciones VALUES('53000', 'Recursos insuficientes');
INSERT INTO excepciones VALUES('53100', 'Disco lleno');
INSERT INTO excepciones VALUES('53200', 'Fuera de memoria');
INSERT INTO excepciones VALUES('53300', 'Demasiadas conexiones');

INSERT INTO excepciones VALUES('53400', 'Límite de configuración excedido');
INSERT INTO excepciones VALUES('54000', 'Límite de programa excedido');
INSERT INTO excepciones VALUES('54001', 'Declaración demasiado compleja');
INSERT INTO excepciones VALUES('54011', 'Demasiadas columnas');
INSERT INTO excepciones VALUES('54023', 'Demasiados argumentos');
INSERT INTO excepciones VALUES('55000', 'Objeto no en estado de requisito previo');
INSERT INTO excepciones VALUES('55006', 'Objeto en uso');
INSERT INTO excepciones VALUES('55P02', 'No puedo cambiar el parámetro de tiempo de ejecución');
INSERT INTO excepciones VALUES('55P03', 'Cerradura no disponible');
INSERT INTO excepciones VALUES('55P04', 'Uso de nuevo valor de enumeración inseguro');
INSERT INTO excepciones VALUES('57000', 'Intervención del operador');
INSERT INTO excepciones VALUES('57014', 'Consulta cancelada');
INSERT INTO excepciones VALUES('57P01', 'Cierre del administrador');
INSERT INTO excepciones VALUES('57P02', 'Apagado forzoso');
INSERT INTO excepciones VALUES('57P03', 'No se puede conectar ahora');
INSERT INTO excepciones VALUES('57P04', 'Base de datos eliminada');
INSERT INTO excepciones VALUES('57P05', 'Tiempo de espera de sesión inactiva');
INSERT INTO excepciones VALUES('58000', 'Error en el sistema');
INSERT INTO excepciones VALUES('58030', 'Error de io');
INSERT INTO excepciones VALUES('58P01', 'Archivo no definido');
INSERT INTO excepciones VALUES('58P02', 'Archivo duplicado');
INSERT INTO excepciones VALUES('72000', 'Instantánea demasiado vieja');
INSERT INTO excepciones VALUES('F0000', 'Error de configuración de archivo');
INSERT INTO excepciones VALUES('F0001', 'El archivo de bloqueo existe');

INSERT INTO excepciones VALUES('HV000', 'Error de fdw');
INSERT INTO excepciones VALUES('HV005', 'Nombre de columna fdw no encontrada');
INSERT INTO excepciones VALUES('HV002', 'Valor del parámetro dinámico fdw necesario');
INSERT INTO excepciones VALUES('HV010', 'Error de secuencia de función fdw');
INSERT INTO excepciones VALUES('HV021', 'Información del descriptor inconsistente de fdw');
INSERT INTO excepciones VALUES('HV024', 'Valor de atributo no válido de fdw');
INSERT INTO excepciones VALUES('HV007', 'Nombre de columna no válido de fdw');
INSERT INTO excepciones VALUES('HV008', 'Número de columna no válido de fdw');
INSERT INTO excepciones VALUES('HV004', 'Tipo de dato no válido de fdw');
INSERT INTO excepciones VALUES('HV006', 'Descriptores de tipo de datos no válidos de fdw');
INSERT INTO excepciones VALUES('HV091', 'Identificador de campo de descriptor no válido fdw');
INSERT INTO excepciones VALUES('HV00B', 'Manejo no válido de fdw');
INSERT INTO excepciones VALUES('HV00C', 'Índice de opciones no válidas de fdw');
INSERT INTO excepciones VALUES('HV00D', 'Nombre de opciones no válidas de fdw');
INSERT INTO excepciones VALUES('HV090', 'Longitud de cadena o longitud de búfer no válidas de fdw');
INSERT INTO excepciones VALUES('HV00A', 'Formato de texto no válido de fdw');
INSERT INTO excepciones VALUES('HV009', 'Uso no válido del puntero nulo de fdw');
INSERT INTO excepciones VALUES('HV014', 'Demasiados manejos de fdw');
INSERT INTO excepciones VALUES('HV001', 'Fdw fuera de memoria');
INSERT INTO excepciones VALUES('HV00P', 'Fdw sin esquemas');

INSERT INTO excepciones VALUES('HV00J', 'Nombre de opción fdw no encontrada');
INSERT INTO excepciones VALUES('HV00K', 'Respuesta de manejo de fdw');
INSERT INTO excepciones VALUES('HV00Q', 'Esquema de fdw no encontrado');
INSERT INTO excepciones VALUES('HV00R', 'Tabla de fdw no encontrada');
INSERT INTO excepciones VALUES('HV00L', 'Fdw no puede crear la ejecución');
INSERT INTO excepciones VALUES('HV00M', 'Fdw no puede crear la respuesta');
INSERT INTO excepciones VALUES('HV00N', 'Fdw no puede establecer la conexión');
INSERT INTO excepciones VALUES('P0000', 'Error de plpsql');
INSERT INTO excepciones VALUES('P0001', 'Excepción levantada encontrada');
INSERT INTO excepciones VALUES('P0002', 'Datos no encontrados');
INSERT INTO excepciones VALUES('P0003', 'Demasiados registros');
INSERT INTO excepciones VALUES('P0004', 'Afirmar el fracaso');
INSERT INTO excepciones VALUES('XX000', 'Error interno');
INSERT INTO excepciones VALUES('XX001', 'Datos corrompidos');
INSERT INTO excepciones VALUES('XX002', 'Índice corrompido');


-- Amazonas
INSERT INTO departamento(departId, departNom) VALUES (1, 'Amazonas');

-- Antioquia
INSERT INTO departamento(departId, departNom) VALUES (2, 'Antioquia');

-- Arauca
INSERT INTO departamento(departId, departNom) VALUES (3, 'Arauca');

-- Atlántico
INSERT INTO departamento(departId, departNom) VALUES (4, 'Atlántico');

-- Bolívar
INSERT INTO departamento(departId, departNom) VALUES (5, 'Bolívar');

-- Boyacá
INSERT INTO departamento(departId, departNom) VALUES (6, 'Boyacá');

-- Caldas
INSERT INTO departamento(departId, departNom) VALUES (7, 'Caldas');

-- Caquetá
INSERT INTO departamento(departId, departNom) VALUES (8, 'Caquetá');

-- Casanare
INSERT INTO departamento(departId, departNom) VALUES (9, 'Casanare');

-- Cauca
INSERT INTO departamento(departId, departNom) VALUES (10, 'Cauca');

-- Cesar
INSERT INTO departamento(departId, departNom) VALUES (11, 'Cesar');

-- Chocó
INSERT INTO departamento(departId, departNom) VALUES (12, 'Chocó');

-- Córdoba
INSERT INTO departamento(departId, departNom) VALUES (13, 'Córdoba');

-- Cundinamarca
INSERT INTO departamento(departId, departNom) VALUES (14, 'Cundinamarca');

-- Guainía
INSERT INTO departamento(departId, departNom) VALUES (15, 'Guainía');

-- Guaviare
INSERT INTO departamento(departId, departNom) VALUES (16, 'Guaviare');

-- Huila
INSERT INTO departamento(departId, departNom) VALUES (17, 'Huila');

-- La Guajira
INSERT INTO departamento(departId, departNom) VALUES (18, 'La Guajira');

-- Magdalena
INSERT INTO departamento(departId, departNom) VALUES (19, 'Magdalena');

-- Meta
INSERT INTO departamento(departId, departNom) VALUES (20, 'Meta');

-- Nariño
INSERT INTO departamento(departId, departNom) VALUES (21, 'Nariño');

-- Norte de Santander
INSERT INTO departamento(departId, departNom) VALUES (22, 'Norte de Santander');

-- Putumayo
INSERT INTO departamento(departId, departNom) VALUES (23, 'Putumayo');

-- Quindío
INSERT INTO departamento(departId, departNom) VALUES (24, 'Quindío');

-- Risaralda
INSERT INTO departamento(departId, departNom) VALUES (25, 'Risaralda');

-- San Andrés y Providencia
INSERT INTO departamento(departId, departNom) VALUES (26, 'San Andrés y Providencia');

-- Santander
INSERT INTO departamento(departId, departNom) VALUES (27, 'Santander');

-- Sucre
INSERT INTO departamento(departId, departNom) VALUES (28, 'Sucre');

-- Tolima
INSERT INTO departamento(departId, departNom) VALUES (29, 'Tolima');

-- Valle del Cauca
INSERT INTO departamento(departId, departNom) VALUES (30, 'Valle del Cauca');

-- Vaupés
INSERT INTO departamento(departId, departNom) VALUES (31, 'Vaupés');

-- Vichada
INSERT INTO departamento(departId, departNom) VALUES (32, 'Vichada');


-- ciudad -- 




-- ciudads de Antioquia
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1, 2, 'Medellín');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (2, 2, 'Abejorral');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (3, 2, 'Abriaquí');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (4, 2, 'Alejandría');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (5, 2, 'Amagá');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (6, 2, 'Amalfi');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (7, 2, 'Andes');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (8, 2, 'Angelópolis');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (9, 2, 'Angostura');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (10, 2, 'Anorí');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (11, 2, 'Santafé de Antioquia');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (12, 2, 'Anzá');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (13, 2, 'Apartadó');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (14, 2, 'Arboletes');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (15, 2, 'Argelia');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (16, 2, 'Armenia');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (17, 2, 'Barbosa');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (18, 2, 'Belmira');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (19, 2, 'Bello');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (20, 2, 'Betania');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (21, 2, 'Betulia');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (22, 2, 'Ciudad Bolívar');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (23, 2, 'Briceño');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (24, 2, 'Buriticá');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (25, 2, 'Cáceres');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (26, 2, 'Caicedo');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (27, 2, 'Caldas');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (28, 2, 'Campamento');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (29, 2, 'Cañasgordas');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (30, 2, 'Caracolí');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (31, 2, 'Caramanta');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (32, 2, 'Carepa');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (33, 2, 'El Carmen de Viboral');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (34, 2, 'Carolina');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (35, 2, 'Caucasia');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (36, 2, 'Chigorodó');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (37, 2, 'Cisneros');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (38, 2, 'Cocorná');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (39, 2, 'Concepción');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (40, 2, 'Concordia');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (41, 2, 'Copacabana');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (42, 2, 'Dabeiba');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (43, 2, 'Don Matías');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (44, 2, 'Ebéjico');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (45, 2, 'El Bagre');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (46, 2, 'Entrerrios');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (47, 2, 'Envigado');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (48, 2, 'Fredonia');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (49, 2, 'Frontino');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (50, 2, 'Giraldo');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (51, 2, 'Girardota');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (52, 2, 'Gómez Plata');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (53, 2, 'Granada');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (54, 2, 'Guadalupe');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (55, 2, 'Guarne');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (56, 2, 'Guatapé');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (57, 2, 'Heliconia');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (58, 2, 'Hispania');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (59, 2, 'Itagüí');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (60, 2, 'Ituango');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (61, 2, 'Jardín');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (62, 2, 'Jericó');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (63, 2, 'La Ceja');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (64, 2, 'La Estrella');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (65, 2, 'La Pintada');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (66, 2, 'La Unión');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (67, 2, 'Liborina');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (68, 2, 'Maceo');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (69, 2, 'Marinilla');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (70, 2, 'Montebello');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (71, 2, 'Murindó');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (72, 2, 'Mutatá');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (73, 2, 'Nariño');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (74, 2, 'Necoclí');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (75, 2, 'Nechí');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (76, 2, 'Olaya');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (77, 2, 'Peñol');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (78, 2, 'Peque');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (79, 2, 'Pueblorrico');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (80, 2, 'Puerto Berrío');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (81, 2, 'Puerto Nare');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (82, 2, 'Puerto Triunfo');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (83, 2, 'Remedios');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (84, 2, 'Retiro');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (85, 2, 'Rionegro');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (86, 2, 'Sabanalarga');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (87, 2, 'Sabaneta');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (88, 2, 'Salgar');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (89, 2, 'San Andrés de Cuerquía');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (90, 2, 'San Carlos');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (91, 2, 'San Francisco');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (92, 2, 'San Jerónimo');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (93, 2, 'San José de la Montaña');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (94, 2, 'San Juan de Urabá');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (95, 2, 'San Luis');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (96, 2, 'San Pedro de los Milagros');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (97, 2, 'San Pedro de Urabá');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (98, 2, 'San Rafael');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (99, 2, 'San Roque');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (100, 2, 'San Vicente');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (101, 2, 'Santa Bárbara');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (102, 2, 'Santa Rosa de Osos');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (103, 2, 'Santo Domingo');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (104, 2, 'El Santuario');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (105, 2, 'Segovia');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (106, 2, 'Sonson');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (107, 2, 'Sopetrán');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (108, 2, 'Támesis');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (109, 2, 'Tarazá');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (110, 2, 'Tarso');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (111, 2, 'Titiribí');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (112, 2, 'Toledo');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (113, 2, 'Turbo');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (114, 2, 'Uramita');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (115, 2, 'Urrao');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (116, 2, 'Valdivia');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (117, 2, 'Valparaíso');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (118, 2, 'Vegachí');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (119, 2, 'Venecia');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (120, 2, 'Vigía del Fuerte');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (121, 2, 'Yalí');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (122, 2, 'Yarumal');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (123, 2, 'Yolombó');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (124, 2, 'Yondó');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (125, 2, 'Zaragoza');

-- ciudads de Amazonas
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (126, 1, 'Leticia');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (127, 1, 'El Encanto');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (128, 1, 'La Chorrera');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (129, 1, 'La Pedrera');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (130, 1, 'La Victoria');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (131, 1, 'Miriti - Paraná');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (132, 1, 'Puerto Alegría');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (133, 1, 'Puerto Arica');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (134, 1, 'Puerto Nariño');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (135, 1, 'Puerto Santander');

-- ciudads de Arauca
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (136, 3, 'Arauca');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (137, 3, 'Arauquita');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (138, 3, 'Cravo Norte');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (139, 3, 'Fortul');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (140, 3, 'Puerto Rondón');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (141, 3, 'Saravena');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (142, 3, 'Tame');


-- ciudads de Atlántico
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (143, 4, 'Barranquilla');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (144, 4, 'Baranoa');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (145, 4, 'Campo de la Cruz');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (146, 4, 'Candelaria');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (147, 4, 'Galapa');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (148, 4, 'Juan de Acosta');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (149, 4, 'Luruaco');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (150, 4, 'Malambo');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (151, 4, 'Manatí');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (152, 4, 'Palmar de Varela');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (153, 4, 'Piojó');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (154, 4, 'Polonuevo');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (155, 4, 'Ponedera');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (156, 4, 'Puerto Colombia');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (157, 4, 'Repelón');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (158, 4, 'Sabanagrande');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (159, 4, 'Sabanalarga');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (160, 4, 'Santa Lucía');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (161, 4, 'Santo Tomás');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (162, 4, 'Soledad');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (163, 4, 'Suan');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (164, 4, 'Tubará');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (165, 4, 'Usiacurí');


-- ciudads de Bolívar
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (166, 5, 'Cartagena de Indias');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (167, 5, 'Achí');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (168, 5, 'Altos del Rosario');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (169, 5, 'Arenal');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (170, 5, 'Arjona');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (171, 5, 'Arroyohondo');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (172, 5, 'Barranco de Loba');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (173, 5, 'Calamar');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (174, 5, 'Cantagallo');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (175, 5, 'Cicuco');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (176, 5, 'Córdoba');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (177, 5, 'Clemencia');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (178, 5, 'El Carmen de Bolívar');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (179, 5, 'El Guamo');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (180, 5, 'El Peñón');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (181, 5, 'Hatillo de Loba');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (182, 5, 'Magangué');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (183, 5, 'Mahates');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (184, 5, 'Margarita');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (185, 5, 'María La Baja');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (186, 5, 'Montecristo');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (187, 5, 'Mompós');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (188, 5, 'Morales');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (189, 5, 'Norosí');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (190, 5, 'Pinillos');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (191, 5, 'Regidor');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (192, 5, 'Río Viejo');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (193, 5, 'San Cristóbal');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (194, 5, 'San Estanislao');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (195, 5, 'San Fernando');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (196, 5, 'San Jacinto');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (197, 5, 'San Jacinto del Cauca');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (198, 5, 'San Juan Nepomuceno');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (199, 5, 'San Martín de Loba');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (200, 5, 'San Pablo');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (201, 5, 'Santa Catalina');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (202, 5, 'Santa Rosa');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (203, 5, 'Santa Rosa del Sur');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (204, 5, 'Simití');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (205, 5, 'Soplaviento');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (206, 5, 'Talaigua Nuevo');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (207, 5, 'Tiquisio');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (208, 5, 'Turbaco');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (209, 5, 'Turbaná');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (210, 5, 'Villanueva');
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (211, 5, 'Zambrano');

-- ciudads de Boyacá

-- Almeida
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (212, 6, 'Almeida');

-- Aquitania
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (213, 6, 'Aquitania');

-- Arcabuco
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (214, 6, 'Arcabuco');

-- Belén
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (215, 6, 'Belén');

-- Berbeo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (216, 6, 'Berbeo');

-- Betéitiva
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (217, 6, 'Betéitiva');

-- Boavita
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (218, 6, 'Boavita');

-- Boyacá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (219, 6, 'Boyacá');

-- Briceño
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (220, 6, 'Briceño');

-- Buenavista
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (221, 6, 'Buenavista');

-- Busbanzá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (222, 6, 'Busbanzá');

-- Caldas
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (223, 6, 'Caldas');

-- Campohermoso
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (224, 6, 'Campohermoso');

-- Cerinza
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (225, 6, 'Cerinza');

-- Chinavita
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (226, 6, 'Chinavita');

-- Chiquinquirá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (227, 6, 'Chiquinquirá');

-- Chíquiza
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (228, 6, 'Chíquiza');

-- Chiscas
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (229, 6, 'Chiscas');

-- Chita
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (230, 6, 'Chita');

-- Chitaraque
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (231, 6, 'Chitaraque');

-- Chivatá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (232, 6, 'Chivatá');

-- Chivor
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (233, 6, 'Chivor');

-- Ciénega
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (234, 6, 'Ciénega');

-- Cómbita
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (235, 6, 'Cómbita');

-- Coper
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (236, 6, 'Coper');

-- Corrales
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (237, 6, 'Corrales');

-- Covarachía
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (238, 6, 'Covarachía');

-- Cubará
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (239, 6, 'Cubará');

-- Cucaita
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (240, 6, 'Cucaita');

-- Cuítiva
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (241, 6, 'Cuítiva');

-- Duitama
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (242, 6, 'Duitama');

-- El Cocuy
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (243, 6, 'El Cocuy');

-- El Espino
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (244, 6, 'El Espino');

-- Firavitoba
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (245, 6, 'Firavitoba');

-- Floresta
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (246, 6, 'Floresta');

-- Gachantivá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (247, 6, 'Gachantivá');

-- Gámeza
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (248, 6, 'Gámeza');

-- Garagoa
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (249, 6, 'Garagoa');

-- Guacamayas
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (250, 6, 'Guacamayas');

-- Guateque
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (251, 6, 'Guateque');

-- Guayatá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (252, 6, 'Guayatá');

-- Güicán
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (253, 6, 'Güicán');

-- Iza
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (254, 6, 'Iza');

-- Jericó
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (255, 6, 'Jericó');

-- La Capilla
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (256, 6, 'La Capilla');

-- La Uvita
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (257, 6, 'La Uvita');

-- La Victoria
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (258, 6, 'La Victoria');

-- Labranzagrande
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (259, 6, 'Labranzagrande');

-- Macanal
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (260, 6, 'Macanal');

-- Maripí
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (261, 6, 'Maripí');

-- Miraflores
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (262, 6, 'Miraflores');

-- Mongua
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (263, 6, 'Mongua');

-- Monguí
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (264, 6, 'Monguí');

-- Moniquirá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (265, 6, 'Moniquirá');

-- Motavita
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (266, 6, 'Motavita');

-- Muzo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (267, 6, 'Muzo');

-- Nobsa
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (268, 6, 'Nobsa');

-- Nuevo Colón
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (269, 6, 'Nuevo Colón');

-- Oicatá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (270, 6, 'Oicatá');

-- Otanche
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (271, 6, 'Otanche');

-- Pachavita
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (272, 6, 'Pachavita');

-- Páez
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (273, 6, 'Páez');

-- Paipa
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (274, 6, 'Paipa');

-- Pajarito
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (275, 6, 'Pajarito');

-- Panqueba
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (276, 6, 'Panqueba');

-- Pauna
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (277, 6, 'Pauna');

-- Paya
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (278, 6, 'Paya');

-- Paz de Río
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (279, 6, 'Paz de Río');

-- Pesca
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (280, 6, 'Pesca');

-- Pisba
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (281, 6, 'Pisba');

-- Puerto Boyacá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (282, 6, 'Puerto Boyacá');

-- Quípama
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (283, 6, 'Quípama');

-- Ramiriquí
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (284, 6, 'Ramiriquí');

-- Ráquira
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (285, 6, 'Ráquira');

-- Rondón
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (286, 6, 'Rondón');

-- Saboyá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (287, 6, 'Saboyá');

-- Sáchica
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (288, 6, 'Sáchica');

-- Samacá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (289, 6, 'Samacá');

-- San Eduardo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (290, 6, 'San Eduardo');

-- San José de Pare
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (291, 6, 'San José de Pare');

-- San Luis de Gaceno
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (292, 6, 'San Luis de Gaceno');

-- San Mateo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (293, 6, 'San Mateo');

-- San Miguel de Sema
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (300, 6, 'San Miguel de Sema');

-- San Pablo de Borbur
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (301, 6, 'San Pablo de Borbur');

-- Santa María
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (302, 6, 'Santa María');

-- Santana
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (303, 6, 'Santana');

-- Santa Rosa de Viterbo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (304, 6, 'Santa Rosa de Viterbo');

-- Santa Sofía
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (305, 6, 'Santa Sofía');

-- Sátivanorte
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (306, 6, 'Sátivanorte');

-- Sátivasur
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (307, 6, 'Sátivasur');

-- Siachoque
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (308, 6, 'Siachoque');

-- Soatá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (309, 6, 'Soatá');

-- Socotá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (310, 6, 'Socotá');

-- Sogamoso
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (311, 6, 'Sogamoso');

-- Somondoco
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (312, 6, 'Somondoco');

-- Sora
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (313, 6, 'Sora');

-- Soracá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (314, 6, 'Soracá');

-- Sotaquirá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (315, 6, 'Sotaquirá');

-- Susacón
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (316, 6, 'Susacón');

-- Sutamarchán
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (317, 6, 'Sutamarchán');

-- Sutatenza
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (318, 6, 'Sutatenza');

-- Tasco
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (319, 6, 'Tasco');

-- Tenza
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (320, 6, 'Tenza');

-- Tibasosa
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (321, 6, 'Tibasosa');

-- Tibaná
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (322, 6, 'Tibaná');

-- Tinjacá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (323, 6, 'Tinjacá');

-- Tipacoque
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (324, 6, 'Tipacoque');

-- Toca
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (325, 6, 'Toca');

-- Togüí
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (326, 6, 'Togüí');

-- Topagá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (327, 6, 'Topagá');

-- Tota
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (328, 6, 'Tota');

-- Tunja
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (329, 6, 'Tunja');

-- Tununguá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (330, 6, 'Tununguá');

-- Turmequé
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (331, 6, 'Turmequé');

-- Tuta
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (332, 6, 'Tuta');

-- Tutazá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (333, 6, 'Tutazá');

-- Ubita
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (334, 6, 'Ubita');

-- Ventaquemada
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (335, 6, 'Ventaquemada');

-- Villa de Leyva
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (336, 6, 'Villa de Leyva');

-- Viracachá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (337, 6, 'Viracachá');

-- Zetaquira
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (338, 6, 'Zetaquira');


-- ciudads de Caldas

-- Aguadas
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (339, 7, 'Aguadas');

-- Anserma
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (340, 7, 'Anserma');

-- Aranzazu
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (341, 7, 'Aranzazu');

-- Belalcázar
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (342, 7, 'Belalcázar');

-- Chinchiná
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (343, 7, 'Chinchiná');

-- Filadelfia
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (344, 7, 'Filadelfia');

-- La Dorada
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (345, 7, 'La Dorada');

-- La Merced
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (346, 7, 'La Merced');

-- Manizales
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (347, 7, 'Manizales');

-- Manzanares
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (348, 7, 'Manzanares');

-- Marmato
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (349, 7, 'Marmato');

-- Marquetalia
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (350, 7, 'Marquetalia');

-- Marulanda
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (351, 7, 'Marulanda');

-- Neira
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (352, 7, 'Neira');

-- Norcasia
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (353, 7, 'Norcasia');

-- Pácora
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (354, 7, 'Pácora');

-- Palestina
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (355, 7, 'Palestina');

-- Pensilvania
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (356, 7, 'Pensilvania');

-- Riosucio
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (357, 7, 'Riosucio');

-- Risaralda
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (358, 7, 'Risaralda');

-- Salamina
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (359, 7, 'Salamina');

-- Samaná
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (360, 7, 'Samaná');

-- San José
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (361, 7, 'San José');

-- Supía
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (362, 7, 'Supía');

-- Victoria
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (363, 7, 'Victoria');

-- Villamaría
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (364, 7, 'Villamaría');

-- Viterbo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (365, 7, 'Viterbo');


-- ciudads de Caquetá

-- Albania
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (366, 8, 'Albania');

-- Belén de los Andaquíes
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (367, 8, 'Belén de los Andaquíes');

-- Cartagena del Chairá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (368, 8, 'Cartagena del Chairá');

-- Curillo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (369, 8, 'Curillo');

-- El Doncello
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (370, 8, 'El Doncello');

-- El Paujil
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (371, 8, 'El Paujil');

-- Florencia
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (372, 8, 'Florencia');

-- La Montañita
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (373, 8, 'La Montañita');

-- Milán
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (374, 8, 'Milán');

-- Morelia
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (375, 8, 'Morelia');

-- Puerto Rico
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (376, 8, 'Puerto Rico');

-- San José del Fragua
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (377, 8, 'San José del Fragua');

-- San Vicente del Caguán
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (378, 8, 'San Vicente del Caguán');

-- Solano
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (379, 8, 'Solano');

-- Solita
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (380, 8, 'Solita');

-- Valparaíso
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (381, 8, 'Valparaíso');


-- ciudads de Casanare

-- Aguazul
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (382, 9, 'Aguazul');

-- Chámeza
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (439, 9, 'Chámeza');

-- Hato Corozal
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (383, 9, 'Hato Corozal');

-- La Salina
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (384, 9, 'La Salina');

-- Maní
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (385, 9, 'Maní');

-- Monterrey
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (386, 9, 'Monterrey');

-- Nunchía
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (387, 9, 'Nunchía');

-- Orocué
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (388, 9, 'Orocué');

-- Paz de Ariporo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (389, 9, 'Paz de Ariporo');

-- Pore
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (390, 9, 'Pore');

-- Recetor
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (391, 9, 'Recetor');

-- Sabanalarga
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (392, 9, 'Sabanalarga');

-- Sácama
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (393, 9, 'Sácama');

-- San Luis de Palenque
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (394, 9, 'San Luis de Palenque');

-- Támara
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (395, 9, 'Támara');

-- Tauramena
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (396, 9, 'Tauramena');

-- Trinidad
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (397, 9, 'Trinidad');

-- Villanueva
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (398, 9, 'Villanueva');


-- ciudades de Cauca

-- Almaguer
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (399, 10, 'Almaguer');

-- Argelia
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (400, 10, 'Argelia');

-- Balboa
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (401, 10, 'Balboa');

-- Bolívar
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (402, 10, 'Bolívar');

-- Buenos Aires
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (403, 10, 'Buenos Aires');

-- Cajibío
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (404, 10, 'Cajibío');

-- Caldono
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (405, 10, 'Caldono');

-- Caloto
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (406, 10, 'Caloto');

-- Corinto
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (407, 10, 'Corinto');

-- El Tambo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (408, 10, 'El Tambo');

-- Florencia
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (409, 10, 'Florencia');

-- Guachené
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (410, 10, 'Guachené');

-- Guapi
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (411, 10, 'Guapi');

-- Inzá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (412, 10, 'Inzá');

-- Jambaló
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (413, 10, 'Jambaló');

-- La Sierra
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (414, 10, 'La Sierra');

-- La Vega
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (415, 10, 'La Vega');

-- López de Micay
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (416, 10, 'López de Micay');

-- Mercaderes
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (417, 10, 'Mercaderes');

-- Miranda
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (418, 10, 'Miranda');

-- Morales
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (419, 10, 'Morales');

-- Padilla
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (420, 10, 'Padilla');

-- Páez
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (421, 10, 'Páez');

-- Patía
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (422, 10, 'Patía');

-- Piendamó
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (423, 10, 'Piendamó');

-- Popayán
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (424, 10, 'Popayán');

-- Puerto Tejada
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (425, 10, 'Puerto Tejada');

-- Puracé
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (426, 10, 'Puracé');

-- Rosas
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (427, 10, 'Rosas');

-- San Sebastián
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (428, 10, 'San Sebastián');

-- Santa Rosa
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (429, 10, 'Santa Rosa');

-- Santander de Quilichao
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (430, 10, 'Santander de Quilichao');

-- Silvia
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (431, 10, 'Silvia');

-- Sotará
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (432, 10, 'Sotará');

-- Suárez
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (433, 10, 'Suárez');

-- Timbío
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (434, 10, 'Timbío');

-- Timbiquí
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (435, 10, 'Timbiquí');

-- Toribío
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (436, 10, 'Toribío');

-- Totoró
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (437, 10, 'Totoró');

-- Villa Rica
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (438, 10, 'Villa Rica');



-- Municipios de Cesar

-- Aguachica
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (440, 11, 'Aguachica');

-- Agustín Codazzi
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (441, 11, 'Agustín Codazzi');

-- Astrea
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (442, 11, 'Astrea');

-- Becerril
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (443, 11, 'Becerril');

-- Bosconia
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (444, 11, 'Bosconia');

-- Chimichagua
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (445, 11, 'Chimichagua');

-- Chiriguaná
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (446, 11, 'Chiriguaná');

-- Curumaní
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (447, 11, 'Curumaní');

-- El Copey
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (448, 11, 'El Copey');

-- El Paso
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (449, 11, 'El Paso');

-- Gamarra
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (450, 11, 'Gamarra');

-- González
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (451, 11, 'González');

-- La Gloria
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (452, 11, 'La Gloria');

-- La Jagua de Ibirico
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (453, 11, 'La Jagua de Ibirico');

-- La Paz
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (454, 11, 'La Paz');

-- Manaure Balcón del Cesar
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (455, 11, 'Manaure Balcón del Cesar');

-- Pailitas
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (456, 11, 'Pailitas');

-- Pelaya
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (457, 11, 'Pelaya');

-- Pueblo Bello
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (458, 11, 'Pueblo Bello');

-- Río de Oro
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (459, 11, 'Río de Oro');

-- San Alberto
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (460, 11, 'San Alberto');

-- San Diego
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (461, 11, 'San Diego');

-- San Martín
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (462, 11, 'San Martín');

-- Tamalameque
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (463, 11, 'Tamalameque');


-- Municipios de Chocó

-- Acandí
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (464, 12, 'Acandí');

-- Alto Baudó
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (465, 12, 'Alto Baudó');

-- Atrato
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (466, 12, 'Atrato');

-- Bagadó
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (467, 12, 'Bagadó');

-- Bahía Solano
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (468, 12, 'Bahía Solano');

-- Bajo Baudó
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (469, 12, 'Bajo Baudó');

-- Bojayá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (470, 12, 'Bojayá');

-- Carmen del Darién
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (471, 12, 'Carmen del Darién');

-- Certegui
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (472, 12, 'Certegui');

-- Condoto
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (473, 12, 'Condoto');

-- El Cantón del San Pablo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (474, 12, 'El Cantón del San Pablo');

-- El Carmen de Atrato
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (475, 12, 'El Carmen de Atrato');

-- Istmina
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (476, 12, 'Istmina');

-- Juradó
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (477, 12, 'Juradó');

-- Lloró
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (478, 12, 'Lloró');

-- Medio Atrato
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (479, 12, 'Medio Atrato');

-- Medio Baudó
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (480, 12, 'Medio Baudó');

-- Medio San Juan
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (481, 12, 'Medio San Juan');

-- Novita
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (482, 12, 'Novita');

-- Nuquí
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (483, 12, 'Nuquí');

-- Río Iró
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (484, 12, 'Río Iró');

-- Río Quito
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (485, 12, 'Río Quito');

-- Riosucio
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (486, 12, 'Riosucio');

-- San José del Palmar
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (487, 12, 'San José del Palmar');

-- Sipí
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (488, 12, 'Sipí');

-- Tadó
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (489, 12, 'Tadó');

-- Unguía
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (490, 12, 'Unguía');

-- Unión Panamericana
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (491, 12, 'Unión Panamericana');


-- Municipios de Córdoba

-- Ayapel
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (492, 13, 'Ayapel');

-- Buenavista
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (493, 13, 'Buenavista');

-- Canalete
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (494, 13, 'Canalete');

-- Cereté
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (495, 13, 'Cereté');

-- Chimá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (496, 13, 'Chimá');

-- Chinú
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (497, 13, 'Chinú');

-- Ciénaga de Oro
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (498, 13, 'Ciénaga de Oro');

-- Cotorra
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (499, 13, 'Cotorra');

-- La Apartada
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (500, 13, 'La Apartada');

-- Lorica
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (501, 13, 'Lorica');

-- Los Córdobas
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (502, 13, 'Los Córdobas');

-- Momil
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (503, 13, 'Momil');

-- Montelíbano
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (504, 13, 'Montelíbano');

-- Montería
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (505, 13, 'Montería');

-- Moñitos
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (506, 13, 'Moñitos');

-- Planeta Rica
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (507, 13, 'Planeta Rica');

-- Pueblo Nuevo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (508, 13, 'Pueblo Nuevo');

-- Puerto Escondido
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (509, 13, 'Puerto Escondido');

-- Puerto Libertador
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (510, 13, 'Puerto Libertador');

-- Purísima
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (511, 13, 'Purísima');

-- Sahagún
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (512, 13, 'Sahagún');

-- San Andrés de Sotavento
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (513, 13, 'San Andrés de Sotavento');

-- San Antero
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (514, 13, 'San Antero');

-- San Bernardo del Viento
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (515, 13, 'San Bernardo del Viento');

-- San Carlos
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (516, 13, 'San Carlos');

-- San José de Uré
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (517, 13, 'San José de Uré');

-- San Pelayo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (518, 13, 'San Pelayo');

-- Tierralta
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (519, 13, 'Tierralta');

-- Valencia
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (520, 13, 'Valencia');


-- Municipios de Cundinamarca

-- Agua de Dios
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (521, 14, 'Agua de Dios');

-- Albán
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (522, 14, 'Albán');

-- Anapoima
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (523, 14, 'Anapoima');

-- Anolaima
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (524, 14, 'Anolaima');

-- Apulo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (525, 14, 'Apulo');

-- Arbeláez
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (526, 14, 'Arbeláez');

-- Beltrán
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (527, 14, 'Beltrán');

-- Bituima
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (528, 14, 'Bituima');

-- Bojacá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (529, 14, 'Bojacá');

-- Cabrera
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (530, 14, 'Cabrera');

-- Cachipay
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (531, 14, 'Cachipay');

-- Cajicá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (532, 14, 'Cajicá');

-- Caparrapí
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (533, 14, 'Caparrapí');

-- Cáqueza
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (534, 14, 'Cáqueza');

-- Carmen de Carupa
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (535, 14, 'Carmen de Carupa');

-- Chaguaní
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (536, 14, 'Chaguaní');

-- Chía
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (537, 14, 'Chía');

-- Chipaque
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (538, 14, 'Chipaque');

-- Choachí
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (539, 14, 'Choachí');

-- Chocontá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (540, 14, 'Chocontá');

-- Cogua
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (541, 14, 'Cogua');

-- Cota
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (542, 14, 'Cota');

-- Cucunubá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (543, 14, 'Cucunubá');

-- El Colegio
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (544, 14, 'El Colegio');

-- El Peñón
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (545, 14, 'El Peñón');

-- Facatativá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (546, 14, 'Facatativá');

-- Fómeque
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (547, 14, 'Fómeque');

-- Fosca
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (548, 14, 'Fosca');

-- Funza
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (549, 14, 'Funza');

-- Fúquene
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (550, 14, 'Fúquene');

-- Fusagasugá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (551, 14, 'Fusagasugá');

-- Gachalá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (552, 14, 'Gachalá');

-- Gachancipá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (553, 14, 'Gachancipá');

-- Gachetá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (554, 14, 'Gachetá');

-- Gama
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (555, 14, 'Gama');

-- Girardot
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (556, 14, 'Girardot');

-- Granada
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (557, 14, 'Granada');

-- Guachetá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (558, 14, 'Guachetá');

-- Guaduas
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (559, 14, 'Guaduas');

-- Guasca
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (560, 14, 'Guasca');

-- Guataquí
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (561, 14, 'Guataquí');

-- Guatavita
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (562, 14, 'Guatavita');

-- Guayabal de Siquima
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (563, 14, 'Guayabal de Siquima');

-- Guayabetal
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (564, 14, 'Guayabetal');

-- Gutiérrez
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (565, 14, 'Gutiérrez');

-- Jerusalén
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (566, 14, 'Jerusalén');

-- Junín
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (567, 14, 'Junín');

-- La Calera
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (568, 14, 'La Calera');

-- La Mesa
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (569, 14, 'La Mesa');

-- La Palma
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (570, 14, 'La Palma');

-- La Peña
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (571, 14, 'La Peña');

-- La Vega
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (572, 14, 'La Vega');

-- Lenguazaque
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (573, 14, 'Lenguazaque');

-- Machetá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (574, 14, 'Machetá');

-- Madrid
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (575, 14, 'Madrid');

-- Manta
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (576, 14, 'Manta');

-- Medina
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (577, 14, 'Medina');

-- Mosquera
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (578, 14, 'Mosquera');

-- Nariño
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (579, 14, 'Nariño');

-- Nemocón
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (580, 14, 'Nemocón');

-- Nilo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (581, 14, 'Nilo');

-- Nimaima
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (582, 14, 'Nimaima');

-- Nocaima
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (583, 14, 'Nocaima');

-- Pacho
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (584, 14, 'Pacho');

-- Paime
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (585, 14, 'Paime');

-- Pandi
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (586, 14, 'Pandi');

-- Paratebueno
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (587, 14, 'Paratebueno');

-- Pasca
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (588, 14, 'Pasca');

-- Puerto Salgar
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (589, 14, 'Puerto Salgar');

-- Pulí
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (590, 14, 'Pulí');

-- Quebradanegra
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (591, 14, 'Quebradanegra');

-- Quetame
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (592, 14, 'Quetame');

-- Quipile
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (593, 14, 'Quipile');

-- Ricaurte
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (594, 14, 'Ricaurte');

-- San Antonio del Tequendama
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (595, 14, 'San Antonio del Tequendama');

-- San Bernardo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (596, 14, 'San Bernardo');

-- San Cayetano
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (597, 14, 'San Cayetano');

-- San Francisco
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (598, 14, 'San Francisco');

-- San Juan de Río Seco
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (599, 14, 'San Juan de Río Seco');

-- Sasaima
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (600, 14, 'Sasaima');

-- Sesquilé
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (601, 14, 'Sesquilé');

-- Sibaté
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (602, 14, 'Sibaté');

-- Silvania
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (603, 14, 'Silvania');

-- Simijaca
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (604, 14, 'Simijaca');

-- Soacha
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (605, 14, 'Soacha');

-- Sopó
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (606, 14, 'Sopó');

-- Subachoque
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (607, 14, 'Subachoque');

-- Suesca
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (608, 14, 'Suesca');

-- Supatá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (609, 14, 'Supatá');

-- Susa
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (610, 14, 'Susa');

-- Sutatausa
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (611, 14, 'Sutatausa');

-- Tabio
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (612, 14, 'Tabio');

-- Tausa
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (613, 14, 'Tausa');

-- Tena
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (614, 14, 'Tena');

-- Tenjo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (615, 14, 'Tenjo');

-- Tibacuy
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (616, 14, 'Tibacuy');

-- Tibirita
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (617, 14, 'Tibirita');

-- Tocaima
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (618, 14, 'Tocaima');

-- Tocancipá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (619, 14, 'Tocancipá');

-- Topaipí
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (620, 14, 'Topaipí');

-- Ubalá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (621, 14, 'Ubalá');

-- Ubaque
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (622, 14, 'Ubaque');

-- Ubaté
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (623, 14, 'Ubaté');

-- Une
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (624, 14, 'Une');

-- Venecia
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (625, 14, 'Venecia');

-- Vergara
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (626, 14, 'Vergara');

-- Vianí
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (627, 14, 'Vianí');

-- Villagómez
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (628, 14, 'Villagómez');

-- Villapinzón
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (629, 14, 'Villapinzón');

-- Villeta
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (630, 14, 'Villeta');

-- Viotá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (631, 14, 'Viotá');

-- Yacopí
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (632, 14, 'Yacopí');

-- Zipacón
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (633, 14, 'Zipacón');

-- Zipaquirá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (634, 14, 'Zipaquirá');


-- Municipios de Guainía

-- Inírida
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (635, 15, 'Inírida');

-- Barranco Minas
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (636, 15, 'Barranco Minas');

-- Cacahual
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (637, 15, 'Cacahual');

-- La Guadalupe
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (638, 15, 'La Guadalupe');

-- Mapiripana
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (639, 15, 'Mapiripana');

-- Morichal
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (640, 15, 'Morichal');

-- Pana Pana
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (641, 15, 'Pana Pana');

-- Puerto Colombia
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (642, 15, 'Puerto Colombia');

-- San Felipe
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (643, 15, 'San Felipe');

-- El Tuparro
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (644, 15, 'El Tuparro');


-- Municipios del Guaviare

-- Calamar
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (645, 16, 'Calamar');

-- El Retorno
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (646, 16, 'El Retorno');

-- Miraflores
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (647, 16, 'Miraflores');

-- San José del Guaviare
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (648, 16, 'San José del Guaviare');


-- Municipios del Huila

-- Acevedo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (649, 17, 'Acevedo');

-- Agrado
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (650, 17, 'Agrado');

-- Aipe
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (651, 17, 'Aipe');

-- Algeciras
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (652, 17, 'Algeciras');

-- Altamira
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (653, 17, 'Altamira');

-- Baraya
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (654, 17, 'Baraya');

-- Campoalegre
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (655, 17, 'Campoalegre');

-- Colombia
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (656, 17, 'Colombia');

-- Elías
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (657, 17, 'Elías');

-- Garzón
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (658, 17, 'Garzón');

-- Gigante
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (659, 17, 'Gigante');

-- Guadalupe
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (660, 17, 'Guadalupe');

-- Hobo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (661, 17, 'Hobo');

-- Iquira
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (662, 17, 'Iquira');

-- Isnos
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (663, 17, 'Isnos');

-- La Argentina
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (664, 17, 'La Argentina');

-- La Plata
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (665, 17, 'La Plata');

-- Nátaga
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (666, 17, 'Nátaga');

-- Neiva
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (667, 17, 'Neiva');

-- Oporapa
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (668, 17, 'Oporapa');

-- Paicol
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (669, 17, 'Paicol');

-- Palermo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (670, 17, 'Palermo');

-- Palestina
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (671, 17, 'Palestina');

-- Pital
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (672, 17, 'Pital');

-- Pitalito
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (673, 17, 'Pitalito');

-- Rivera
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (674, 17, 'Rivera');

-- Saladoblanco
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (675, 17, 'Saladoblanco');

-- San Agustín
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (676, 17, 'San Agustín');

-- Santa María
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (677, 17, 'Santa María');

-- Suaza
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (678, 17, 'Suaza');

-- Tarqui
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (679, 17, 'Tarqui');

-- Tesalia
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (680, 17, 'Tesalia');

-- Tello
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (681, 17, 'Tello');

-- Teruel
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (682, 17, 'Teruel');

-- Timaná
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (683, 17, 'Timaná');

-- Villavieja
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (684, 17, 'Villavieja');

-- Yaguará
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (685, 17, 'Yaguará');


-- Municipios de La Guajira

-- Albania
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (686, 18, 'Albania');

-- Barrancas
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (687, 18, 'Barrancas');

-- Dibulla
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (688, 18, 'Dibulla');

-- Distracción
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (689, 18, 'Distracción');

-- El Molino
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (690, 18, 'El Molino');

-- Fonseca
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (691, 18, 'Fonseca');

-- Hatonuevo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (692, 18, 'Hatonuevo');

-- La Jagua del Pilar
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (693, 18, 'La Jagua del Pilar');

-- Maicao
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (694, 18, 'Maicao');

-- Manaure
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (695, 18, 'Manaure');

-- Riohacha
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (696, 18, 'Riohacha');

-- San Juan del Cesar
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (697, 18, 'San Juan del Cesar');

-- Uribia
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (698, 18, 'Uribia');

-- Urumita
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (699, 18, 'Urumita');

-- Villanueva
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (700, 18, 'Villanueva');


-- Municipios de Magdalena

-- Algarrobo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (701, 19, 'Algarrobo');

-- Aracataca
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (702, 19, 'Aracataca');

-- Ariguaní
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (703, 19, 'Ariguaní');

-- Cerro de San Antonio
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (704, 19, 'Cerro de San Antonio');

-- Chibolo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (705, 19, 'Chibolo');

-- Ciénaga
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (706, 19, 'Ciénaga');

-- Concordia
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (707, 19, 'Concordia');

-- El Banco
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (708, 19, 'El Banco');

-- El Piñón
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (709, 19, 'El Piñón');

-- El Retén
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (710, 19, 'El Retén');

-- Fundación
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (711, 19, 'Fundación');

-- Guamal
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (712, 19, 'Guamal');

-- Nueva Granada
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (713, 19, 'Nueva Granada');

-- Pedraza
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (714, 19, 'Pedraza');

-- Pijiño del Carmen
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (715, 19, 'Pijiño del Carmen');

-- Pivijay
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (716, 19, 'Pivijay');

-- Plato
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (717, 19, 'Plato');

-- Puebloviejo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (718, 19, 'Puebloviejo');

-- Remolino
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (719, 19, 'Remolino');

-- Sabanas de San Ángel
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (720, 19, 'Sabanas de San Ángel');

-- Salamina
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (721, 19, 'Salamina');

-- San Sebastián de Buenavista
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (722, 19, 'San Sebastián de Buenavista');

-- San Zenón
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (723, 19, 'San Zenón');

-- Santa Ana
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (724, 19, 'Santa Ana');

-- Santa Bárbara de Pinto
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (725, 19, 'Santa Bárbara de Pinto');

-- Santa Marta
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (726, 19, 'Santa Marta');

-- San Ángel
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (727, 19, 'San Ángel');

-- Sitionuevo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (728, 19, 'Sitionuevo');

-- Tenerife
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (729, 19, 'Tenerife');

-- Zona Bananera
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (730, 19, 'Zona Bananera');


-- Municipios de Meta

-- Acacías
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (731, 20, 'Acacías');

-- Barranca de Upía
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (732, 20, 'Barranca de Upía');

-- Cabuyaro
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (733, 20, 'Cabuyaro');

-- Castilla la Nueva
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (734, 20, 'Castilla la Nueva');

-- Cubarral
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (735, 20, 'Cubarral');

-- Cumaral
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (736, 20, 'Cumaral');

-- El Calvario
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (737, 20, 'El Calvario');

-- El Castillo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (738, 20, 'El Castillo');

-- El Dorado
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (739, 20, 'El Dorado');

-- Fuente de Oro
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (740, 20, 'Fuente de Oro');

-- Granada
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (741, 20, 'Granada');

-- Guamal
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (742, 20, 'Guamal');

-- La Macarena
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (743, 20, 'La Macarena');

-- La Uribe
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (744, 20, 'La Uribe');

-- Lejanías
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (745, 20, 'Lejanías');

-- Mapiripán
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (746, 20, 'Mapiripán');

-- Mesetas
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (747, 20, 'Mesetas');

-- Puerto Concordia
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (748, 20, 'Puerto Concordia');

-- Puerto Gaitán
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (749, 20, 'Puerto Gaitán');

-- Puerto Lleras
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (750, 20, 'Puerto Lleras');

-- Puerto López
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (751, 20, 'Puerto López');

-- Puerto Rico
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (752, 20, 'Puerto Rico');

-- Restrepo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (753, 20, 'Restrepo');

-- San Carlos de Guaroa
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (754, 20, 'San Carlos de Guaroa');

-- San Juan de Arama
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (755, 20, 'San Juan de Arama');

-- San Juanito
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (756, 20, 'San Juanito');

-- San Martín
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (757, 20, 'San Martín');

-- Uribe
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (758, 20, 'Uribe');

-- Villavicencio
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (759, 20, 'Villavicencio');

-- Vista Hermosa
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (760, 20, 'Vista Hermosa');


-- Municipios de Nariño

-- Arboleda
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (761, 21, 'Arboleda');

-- Barbacoas
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (762, 21, 'Barbacoas');

-- Belén
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (763, 21, 'Belén');

-- Buesaco
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (764, 21, 'Buesaco');

-- Chachagüí
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (765, 21, 'Chachagüí');

-- Colón
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (766, 21, 'Colón');

-- Consaca
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (767, 21, 'Consaca');

-- Contadero
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (768, 21, 'Contadero');

-- Córdoba
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (769, 21, 'Córdoba');

-- Cuaspud
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (770, 21, 'Cuaspud');

-- Cumbal
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (771, 21, 'Cumbal');

-- Cumbitara
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (772, 21, 'Cumbitara');

-- El Charco
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (773, 21, 'El Charco');

-- El Peñol
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (774, 21, 'El Peñol');

-- El Rosario
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (775, 21, 'El Rosario');

-- El Tablón de Gómez
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (776, 21, 'El Tablón de Gómez');

-- El Tambo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (777, 21, 'El Tambo');

-- Francisco Pizarro
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (778, 21, 'Francisco Pizarro');

-- Funes
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (779, 21, 'Funes');

-- Guachucal
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (780, 21, 'Guachucal');

-- Guaitarilla
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (781, 21, 'Guaitarilla');

-- Gualmatán
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (782, 21, 'Gualmatán');

-- Iles
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (783, 21, 'Iles');

-- Imués
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (784, 21, 'Imués');

-- Ipiales
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (785, 21, 'Ipiales');

-- La Cruz
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (786, 21, 'La Cruz');

-- La Florida
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (787, 21, 'La Florida');

-- La Llanada
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (788, 21, 'La Llanada');

-- La Tola
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (789, 21, 'La Tola');

-- La Unión
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (790, 21, 'La Unión');

-- Leiva
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (791, 21, 'Leiva');

-- Linares
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (792, 21, 'Linares');

-- Los Andes
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (793, 21, 'Los Andes');

-- Magüí
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (794, 21, 'Magüí');

-- Mallama
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (795, 21, 'Mallama');

-- Mosquera
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (796, 21, 'Mosquera');

-- Nariño
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (797, 21, 'Nariño');

-- Olaya Herrera
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (798, 21, 'Olaya Herrera');

-- Ospina
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (799, 21, 'Ospina');

-- Pasto
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (800, 21, 'Pasto');

-- Policarpa
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (801, 21, 'Policarpa');

-- Potosí
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (802, 21, 'Potosí');

-- Providencia
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (803, 21, 'Providencia');

-- Puerres
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (804, 21, 'Puerres');

-- Pupiales
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (805, 21, 'Pupiales');

-- Ricaurte
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (806, 21, 'Ricaurte');

-- Roberto Payán
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (807, 21, 'Roberto Payán');

-- Samaniego
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (808, 21, 'Samaniego');

-- San Bernardo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (809, 21, 'San Bernardo');

-- San Lorenzo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (810, 21, 'San Lorenzo');

-- San Pablo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (811, 21, 'San Pablo');

-- San Pedro de Cartago
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (812, 21, 'San Pedro de Cartago');

-- Sandoná
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (813, 21, 'Sandoná');

-- Santa Bárbara
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (814, 21, 'Santa Bárbara');

-- Santacruz
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (815, 21, 'Santacruz');

-- Sapuyes
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (816, 21, 'Sapuyes');

-- Taminango
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (817, 21, 'Taminango');

-- Tangua
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (818, 21, 'Tangua');

-- Túquerres
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (819, 21, 'Túquerres');

-- Yacuanquer
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (820, 21, 'Yacuanquer');


-- Municipios de Norte de Santander

-- Ábrego
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (821, 22, 'Ábrego');

-- Arboledas
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (822, 22, 'Arboledas');

-- Bochalema
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (823, 22, 'Bochalema');

-- Bucarasica
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (824, 22, 'Bucarasica');

-- Cáchira
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (825, 22, 'Cáchira');

-- Cácota
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (826, 22, 'Cácota');

-- Chinácota
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (827, 22, 'Chinácota');

-- Chitagá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (828, 22, 'Chitagá');

-- Convención
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (829, 22, 'Convención');

-- Cúcuta
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (830, 22, 'Cúcuta');

-- Cucutilla
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (831, 22, 'Cucutilla');

-- Durania
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (832, 22, 'Durania');

-- El Carmen
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (833, 22, 'El Carmen');

-- El Tarra
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (834, 22, 'El Tarra');

-- El Zulia
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (835, 22, 'El Zulia');

-- Gramalote
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (836, 22, 'Gramalote');

-- Hacarí
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (837, 22, 'Hacarí');

-- Herrán
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (838, 22, 'Herrán');

-- La Esperanza
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (839, 22, 'La Esperanza');

-- La Playa
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (840, 22, 'La Playa');

-- Labateca
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (841, 22, 'Labateca');

-- Los Patios
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (842, 22, 'Los Patios');

-- Lourdes
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (843, 22, 'Lourdes');

-- Mutiscua
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (844, 22, 'Mutiscua');

-- Ocaña
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (845, 22, 'Ocaña');

-- Pamplona
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (846, 22, 'Pamplona');

-- Pamplonita
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (847, 22, 'Pamplonita');

-- Puerto Santander
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (848, 22, 'Puerto Santander');

-- Ragonvalia
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (849, 22, 'Ragonvalia');

-- Salazar
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (850, 22, 'Salazar');

-- San Calixto
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (851, 22, 'San Calixto');

-- San Cayetano
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (852, 22, 'San Cayetano');

-- San José de Cúcuta
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (853, 22, 'San José de Cúcuta');

-- Santiago
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (854, 22, 'Santiago');

-- Sardinata
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (855, 22, 'Sardinata');

-- Silos
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (856, 22, 'Silos');

-- Teorama
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (857, 22, 'Teorama');

-- Tibú
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (858, 22, 'Tibú');

-- Toledo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (859, 22, 'Toledo');

-- Villa Caro
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (860, 22, 'Villa Caro');

-- Villa del Rosario
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (861, 22, 'Villa del Rosario');


-- Colón
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (862, 23, 'Colón');

-- Mocoa
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (863, 23, 'Mocoa');

-- Orito
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (864, 23, 'Orito');

-- Puerto Asís
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (865, 23, 'Puerto Asís');

-- Puerto Caicedo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (866, 23, 'Puerto Caicedo');

-- Puerto Guzmán
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (867, 23, 'Puerto Guzmán');

-- Puerto Leguízamo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (868, 23, 'Puerto Leguízamo');

-- San Francisco
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (869, 23, 'San Francisco');

-- San Miguel
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (870, 23, 'San Miguel');

-- Santiago
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (871, 23, 'Santiago');

-- Sibundoy
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (872, 23, 'Sibundoy');

-- Valle del Guamuez
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (873, 23, 'Valle del Guamuez');

-- Villagarzón
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (874, 23, 'Villagarzón');


-- Municipios de Quindío

-- Armenia
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (875, 24, 'Armenia');

-- Buenavista
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (876, 24, 'Buenavista');

-- Calarcá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (877, 24, 'Calarcá');

-- Circasia
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (878, 24, 'Circasia');

-- Córdoba
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (879, 24, 'Córdoba');

-- Filandia
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (880, 24, 'Filandia');

-- Génova
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (881, 24, 'Génova');

-- La Tebaida
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (882, 24, 'La Tebaida');

-- Montenegro
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (883, 24, 'Montenegro');

-- Pijao
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (884, 24, 'Pijao');

-- Quimbaya
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (885, 24, 'Quimbaya');

-- Salento
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (886, 24, 'Salento');


-- Municipios de Risaralda

-- Apía
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (887, 25, 'Apía');

-- Balboa
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (888, 25, 'Balboa');

-- Belén de Umbría
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (889, 25, 'Belén de Umbría');

-- Dosquebradas
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (890, 25, 'Dosquebradas');

-- Guática
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (891, 25, 'Guática');

-- La Celia
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (892, 25, 'La Celia');

-- La Virginia
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (893, 25, 'La Virginia');

-- Marsella
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (894, 25, 'Marsella');

-- Mistrató
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (895, 25, 'Mistrató');

-- Pereira
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (896, 25, 'Pereira');

-- Pueblo Rico
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (897, 25, 'Pueblo Rico');

-- Quinchía
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (898, 25, 'Quinchía');

-- Santa Rosa de Cabal
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (899, 25, 'Santa Rosa de Cabal');

-- Santuario
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (900, 25, 'Santuario');


-- Municipios de San Andrés y Providencia

-- Providencia
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (901, 26, 'Providencia');

-- San Andrés
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (902, 26, 'San Andrés');


-- Municipios de Santander

-- Aguada
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (903, 27, 'Aguada');

-- Albania
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (904, 27, 'Albania');

-- Aratoca
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (905, 27, 'Aratoca');

-- Barbosa
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (906, 27, 'Barbosa');

-- Barichara
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (907, 27, 'Barichara');

-- Barrancabermeja
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (908, 27, 'Barrancabermeja');

-- Betulia
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (909, 27, 'Betulia');

-- Bolívar
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (910, 27, 'Bolívar');

-- Bucaramanga
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (911, 27, 'Bucaramanga');

-- Cabrera
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (912, 27, 'Cabrera');

-- California
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (913, 27, 'California');

-- Capitanejo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (914, 27, 'Capitanejo');

-- Carcasí
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1109, 27, 'Carcasí');

-- Cepitá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1110, 27, 'Cepitá');

-- Cerrito
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (915, 27, 'Cerrito');

-- Charalá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (916, 27, 'Charalá');

-- Charta
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (917, 27, 'Charta');

-- Chima
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (918, 27, 'Chima');

-- Chipatá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (919, 27, 'Chipatá');

-- Cimitarra
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (920, 27, 'Cimitarra');

-- Concepción
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (921, 27, 'Concepción');

-- Confines
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (922, 27, 'Confines');

-- Contratación
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (923, 27, 'Contratación');

-- Coromoro
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (924, 27, 'Coromoro');

-- Curití
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (925, 27, 'Curití');

-- El Carmen de Chucurí
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (926, 27, 'El Carmen de Chucurí');

-- El Guacamayo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (927, 27, 'El Guacamayo');

-- El Peñón
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (928, 27, 'El Peñón');

-- El Playón
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (929, 27, 'El Playón');

-- Encino
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (930, 27, 'Encino');

-- Enciso
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (931, 27, 'Enciso');

-- Florián
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (932, 27, 'Florián');

-- Floridablanca
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (933, 27, 'Floridablanca');

-- Galán
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (934, 27, 'Galán');

-- Gambita
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (935, 27, 'Gambita');

-- Girón
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (936, 27, 'Girón');

-- Guaca
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (937, 27, 'Guaca');

-- Guadalupe
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (938, 27, 'Guadalupe');

-- Guapotá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (939, 27, 'Guapotá');

-- Guavatá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (940, 27, 'Guavatá');

-- Güepsa
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (941, 27, 'Güepsa');

-- Hato
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (942, 27, 'Hato');

-- Jesús María
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (943, 27, 'Jesús María');

-- Jordán
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (944, 27, 'Jordán');

-- La Belleza
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (945, 27, 'La Belleza');

-- Landázuri
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (946, 27, 'Landázuri');

-- La Paz
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (947, 27, 'La Paz');

-- Lebrija
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (948, 27, 'Lebrija');

-- Los Santos
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (949, 27, 'Los Santos');

-- Macaravita
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (950, 27, 'Macaravita');

-- Málaga
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (951, 27, 'Málaga');

-- Matanza
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (952, 27, 'Matanza');

-- Mogotes
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (953, 27, 'Mogotes');

-- Molagavita
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (954, 27, 'Molagavita');

-- Norte de Bucaramanga
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1111, 27, 'Norte de Bucaramanga');

-- Ocamonte
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (955, 27, 'Ocamonte');

-- Oiba
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (956, 27, 'Oiba');

-- Onzaga
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (957, 27, 'Onzaga');

-- Palmar
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (958, 27, 'Palmar');

-- Palmas del Socorro
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (959, 27, 'Palmas del Socorro');

-- Palo Negro
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (960, 27, 'Palo Negro');

-- Piedecuesta
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (961, 27, 'Piedecuesta');

-- Pinchote
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (962, 27, 'Pinchote');

-- Puente Nacional
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (963, 27, 'Puente Nacional');

-- Puerto Parra
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (964, 27, 'Puerto Parra');

-- Puerto Wilches
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (965, 27, 'Puerto Wilches');

-- Rionegro
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (966, 27, 'Rionegro');

-- Sabana de Torres
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (967, 27, 'Sabana de Torres');

-- San Andrés
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (968, 27, 'San Andrés');

-- San Benito
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (969, 27, 'San Benito');

-- San Gil
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (970, 27, 'San Gil');

-- San Joaquín
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (971, 27, 'San Joaquín');

-- San José de Miranda
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (972, 27, 'San José de Miranda');

-- San Miguel
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (973, 27, 'San Miguel');

-- San Vicente de Chucurí
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (974, 27, 'San Vicente de Chucurí');

-- Santa Bárbara
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (975, 27, 'Santa Bárbara');

-- Santa Helena del Opón
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (976, 27, 'Santa Helena del Opón');

-- Simacota
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (977, 27, 'Simacota');

-- Socorro
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (978, 27, 'Socorro');

-- Suaita
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (979, 27, 'Suaita');

-- Sucre
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (980, 27, 'Sucre');

-- Suratá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (981, 27, 'Suratá');

-- Tona
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (982, 27, 'Tona');

-- Valle de San José
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (983, 27, 'Valle de San José');

-- Vélez
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (984, 27, 'Vélez');

-- Vetas
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (985, 27, 'Vetas');

-- Villanueva
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (986, 27, 'Villanueva');

-- Zapatoca
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (987, 27, 'Zapatoca');


-- Municipios de Sucre

-- Buenavista
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (988, 28, 'Buenavista');

-- Caimito
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (989, 28, 'Caimito');

-- Chalán
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (990, 28, 'Chalán');

-- Colosó
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (991, 28, 'Colosó');

-- Corozal
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (992, 28, 'Corozal');

-- Coveñas
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (993, 28, 'Coveñas');

-- El Roble
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (994, 28, 'El Roble');

-- Galeras
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (995, 28, 'Galeras');

-- Guaranda
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (996, 28, 'Guaranda');

-- La Unión
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (997, 28, 'La Unión');

-- Los Palmitos
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (998, 28, 'Los Palmitos');

-- Majagual
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (999, 28, 'Majagual');

-- Morroa
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1000, 28, 'Morroa');

-- Ovejas
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1001, 28, 'Ovejas');

-- Palmito
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1002, 28, 'Palmito');

-- Sampués
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1003, 28, 'Sampués');

-- San Benito Abad
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1004, 28, 'San Benito Abad');

-- San Juan de Betulia
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1005, 28, 'San Juan de Betulia');

-- San Marcos
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1006, 28, 'San Marcos');

-- San Onofre
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1007, 28, 'San Onofre');

-- San Pedro
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1008, 28, 'San Pedro');

-- Sincelejo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1009, 28, 'Sincelejo');

-- Sucre
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1010, 28, 'Sucre');

-- Tolú
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1011, 28, 'Tolú');

-- Toluviejo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1012, 28, 'Toluviejo');


-- Municipios de Tolima

-- Alpujarra
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1013, 29, 'Alpujarra');

-- Alvarado
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1014, 29, 'Alvarado');

-- Ambalema
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1015, 29, 'Ambalema');

-- Anzoátegui
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1016, 29, 'Anzoátegui');

-- Armero
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1017, 29, 'Armero');

-- Ataco
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1018, 29, 'Ataco');

-- Cajamarca
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1019, 29, 'Cajamarca');

-- Carmen de Apicalá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1020, 29, 'Carmen de Apicalá');

-- Casabianca
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1021, 29, 'Casabianca');

-- Chaparral
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1022, 29, 'Chaparral');

-- Coello
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1023, 29, 'Coello');

-- Coyaima
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1024, 29, 'Coyaima');

-- Cunday
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1025, 29, 'Cunday');

-- Dolores
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1026, 29, 'Dolores');

-- Espinal
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1027, 29, 'Espinal');

-- Falan
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1028, 29, 'Falan');

-- Flandes
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1029, 29, 'Flandes');

-- Fresno
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1030, 29, 'Fresno');

-- Guamo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1031, 29, 'Guamo');

-- Herveo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1032, 29, 'Herveo');

-- Honda
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1033, 29, 'Honda');

-- Ibagué
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1034, 29, 'Ibagué');

-- Icononzo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1035, 29, 'Icononzo');

-- Lérida
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1036, 29, 'Lérida');

-- Líbano
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1037, 29, 'Líbano');

-- Mariquita
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1038, 29, 'Mariquita');

-- Melgar
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1039, 29, 'Melgar');

-- Murillo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1040, 29, 'Murillo');

-- Natagaima
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1041, 29, 'Natagaima');

-- Ortega
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1042, 29, 'Ortega');

-- Palocabildo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1043, 29, 'Palocabildo');

-- Piedras
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1044, 29, 'Piedras');

-- Planadas
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1045, 29, 'Planadas');

-- Prado
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1046, 29, 'Prado');

-- Purificación
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1047, 29, 'Purificación');

-- Rioblanco
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1048, 29, 'Rioblanco');

-- Rovira
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1049, 29, 'Rovira');

-- Saldaña
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1050, 29, 'Saldaña');

-- San Antonio
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1051, 29, 'San Antonio');

-- San Luis
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1052, 29, 'San Luis');

-- Santa Isabel
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1053, 29, 'Santa Isabel');

-- Suárez
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1054, 29, 'Suárez');

-- Valle de San Juan
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1055, 29, 'Valle de San Juan');

-- Venadillo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1056, 29, 'Venadillo');

-- Villahermosa
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1057, 29, 'Villahermosa');

-- Villarrica
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1058, 29, 'Villarrica');


-- Municipios de Valle del Cauca

-- Alcalá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1059, 30, 'Alcalá');

-- Andalucía
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1060, 30, 'Andalucía');

-- Ansermanuevo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1061, 30, 'Ansermanuevo');

-- Argelia
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1062, 30, 'Argelia');

-- Bolívar
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1063, 30, 'Bolívar');

-- Buenaventura
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1064, 30, 'Buenaventura');

-- Bugalagrande
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1065, 30, 'Bugalagrande');

-- Caicedonia
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1066, 30, 'Caicedonia');

-- Cali
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1067, 30, 'Cali');

-- Calima
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1068, 30, 'Calima');

-- Candelaria
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1069, 30, 'Candelaria');

-- Cartago
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1070, 30, 'Cartago');

-- Dagua
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1071, 30, 'Dagua');

-- El Águila
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1072, 30, 'El Águila');

-- El Cairo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1073, 30, 'El Cairo');

-- El Cerrito
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1074, 30, 'El Cerrito');

-- El Dovio
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1075, 30, 'El Dovio');

-- Florida
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1076, 30, 'Florida');

-- Ginebra
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1077, 30, 'Ginebra');

-- Guacarí
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1078, 30, 'Guacarí');

-- Jamundí
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1079, 30, 'Jamundí');

-- La Cumbre
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1080, 30, 'La Cumbre');

-- La Unión
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1081, 30, 'La Unión');

-- La Victoria
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1082, 30, 'La Victoria');

-- Obando
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1083, 30, 'Obando');

-- Palmira
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1084, 30, 'Palmira');

-- Pradera
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1085, 30, 'Pradera');

-- Restrepo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1086, 30, 'Restrepo');

-- Riofrío
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1087, 30, 'Riofrío');

-- Roldanillo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1088, 30, 'Roldanillo');

-- San Pedro
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1089, 30, 'San Pedro');

-- Sevilla
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1090, 30, 'Sevilla');

-- Toro
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1091, 30, 'Toro');

-- Trujillo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1092, 30, 'Trujillo');

-- Tuluá
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1093, 30, 'Tuluá');

-- Ulloa
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1094, 30, 'Ulloa');

-- Versalles
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1095, 30, 'Versalles');

-- Vijes
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1096, 30, 'Vijes');

-- Yotoco
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1097, 30, 'Yotoco');

-- Yumbo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1098, 30, 'Yumbo');

-- Zarzal
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1099, 30, 'Zarzal');


-- Municipios de Vaupés

-- Carurú
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1100, 31, 'Carurú');

-- Mitú
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1101, 31, 'Mitú');

-- Papunaua
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1102, 31, 'Papunaua');

-- Taraira
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1103, 31, 'Taraira');

-- Yavaraté
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1104, 31, 'Yavaraté');


-- Municipios de Vichada

-- Cumaribo
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1105, 32, 'Cumaribo');

-- La Primavera
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1106, 32, 'La Primavera');

-- Puerto Carreño
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1107, 32, 'Puerto Carreño');

-- Santa Rosalía
INSERT INTO ciudad(ciudadId, idDepart, ciudadNom) VALUES (1108, 32, 'Santa Rosalía');



INSERT INTO tipoproducto(tipoProId, tipoProNom,usr_insert, usr_insert_rol, fec_insert) VALUES(1, 'Motor', 'yespinosa', 'Administrador',Now());
INSERT INTO tipoproducto(tipoProId, tipoProNom,usr_insert, usr_insert_rol, fec_insert) VALUES(2, 'Suspensión', 'yespinosa', 'Administrador',Now());
INSERT INTO tipoproducto(tipoProId, tipoProNom,usr_insert, usr_insert_rol, fec_insert) VALUES(3, 'Transmisión', 'yespinosa', 'Administrador',Now());
INSERT INTO tipoproducto(tipoProId, tipoProNom,usr_insert, usr_insert_rol, fec_insert) VALUES(4, 'Iluminación', 'yespinosa', 'Administrador',Now());
INSERT INTO linea(lineaId, lineaNom,usr_insert, usr_insert_rol, fec_insert) VALUES(1, 'Amarok', 'yespinosa', 'Administrador',Now());
INSERT INTO linea(lineaId, lineaNom,usr_insert, usr_insert_rol, fec_insert) VALUES(2, 'Audi', 'yespinosa', 'Administrador',Now());
INSERT INTO linea(lineaId, lineaNom,usr_insert, usr_insert_rol, fec_insert) VALUES(3, 'Jetta', 'yespinosa', 'Administrador',Now());
INSERT INTO linea(lineaId, lineaNom,usr_insert, usr_insert_rol, fec_insert) VALUES(4, 'Bmw', 'yespinosa', 'Administrador',Now());
INSERT INTO marca(marcaId, marcaNom,usr_insert, usr_insert_rol, fec_insert) VALUES(1, 'BREMBO', 'yespinosa', 'Administrador',Now());
INSERT INTO marca(marcaId, marcaNom,usr_insert, usr_insert_rol, fec_insert) VALUES(2, 'MAHLE', 'yespinosa', 'Administrador',Now());



INSERT INTO usuario(usuarioDoc, usuarioRol, usuarioNom, usuarioDir, usuarioTel, usuarioEma, usuarioCon, usr_insert, usr_insert_rol, fec_insert) 
				VALUES('1234567890', 'Mensajero', 'Mensajero Uno', 'Dirección ejemplo', '3164578736', 'correo@gmail.com', md5('uno12345678'), 'admin', 'Administrador', now());
				
INSERT INTO usuario(usuarioDoc, usuarioRol, usuarioNom, usuarioDir, usuarioTel, usuarioEma, usuarioCon, usr_insert, usr_insert_rol, fec_insert) 
				VALUES('1234567890', 'Vendedor', 'Vendedor Uno', 'Dirección ejemplo', '3164578736', 'correo@gmail.com', md5('uno12345678'), 'admin', 'Administrador', now());
				

INSERT INTO usuario(usuarioDoc, usuarioRol, usuarioNom, usuarioDir, usuarioTel, usuarioEma, usuarioCon, usr_insert, usr_insert_rol, fec_insert) 
				VALUES('1005734762', 'Mensajero', 'Mensajero Dos', 'Dirección ejemplo', '3164578221', 'correo@gmail.com', md5('dos12345678'), 'admin', 'Administrador', now());

INSERT INTO usuario(usuarioDoc, usuarioRol, usuarioNom, usuarioDir, usuarioTel, usuarioEma, usuarioCon, usr_insert, usr_insert_rol, fec_insert) 
				VALUES('1239874560', 'Bodeguero', 'Bodeguero Dos', 'Dirección ejemplo', '3178576029', 'correo@gmail.com', md5('uno12345678'), 'admin', 'Administrador', now());


INSERT INTO producto(produccod, idTipoPro, idLinea, idMarca, producNom, producMod, producSto, producPre, usr_insert, usr_insert_rol) 
VALUES('ABC-123', 1, 2, 1, 'Producto uno ejemplo', '2019', 500, 35000, 'admin', 'Administrador');
INSERT INTO producto(produccod, idTipoPro, idLinea, idMarca, producNom, producMod, producSto, producPre, usr_insert, usr_insert_rol) 
VALUES('DEF-456', 1, 2, 1, 'Producto dos ejemplo', '2019', 500, 30000, 'admin', 'Administrador');
INSERT INTO producto(produccod, idTipoPro, idLinea, idMarca, producNom, producMod, producSto, producPre, usr_insert, usr_insert_rol) 
VALUES('XYZ-980', 1, 2, 1, 'Producto tres ejemplo', '2023', 500, 13000, 'admin', 'Administrador');

--FUNCIONES DE INSERCIÓN, ACTUALIZACIÓN Y BORRADO

CREATE OR REPLACE FUNCTION fun_active_cliente(wdoc_cliente cliente.clientdoc%TYPE,
                                                wuser_update cliente.usr_update%TYPE,
                                                wuser_update_rol  cliente.usr_update_rol%TYPE) RETURNS VARCHAR AS
$BODY$
    DECLARE wcliente cliente.clientDoc%TYPE;
    DECLARE wmessage VARCHAR;
    BEGIN
        wmessage = '00000';
        SELECT clientDoc INTO wcliente FROM cliente WHERE clientDoc=wdoc_cliente FOR UPDATE;
        IF NOT FOUND THEN
            wmessage = 'El cliente no se encuentra registrado';
            RETURN wmessage;
        END IF;
        UPDATE cliente SET clientAct=TRUE,
                                usr_update      = wuser_update,
                                usr_update_rol  = wuser_update_rol,
                                fec_update      = now()
        WHERE clientdoc = wdoc_cliente;
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage = 'Error en la activación';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_active_empresatransporte(wnit_empresatransporte empresatransporte.empreTranit%TYPE,
                                                wuser_update empresatransporte.usr_update%TYPE,
                                                wuser_update_rol  empresatransporte.usr_update_rol%TYPE) RETURNS VARCHAR AS
$BODY$
    DECLARE wempresatransporte empresatransporte.empreTranit%TYPE;
    DECLARE wmessage VARCHAR;
    BEGIN
        wmessage = '00000';
        SELECT empreTranit INTO wempresatransporte FROM empresatransporte WHERE empreTranit=wnit_empresatransporte FOR UPDATE;
        IF NOT FOUND THEN
            wmessage = 'La empresa de transporte no se encuentra registrado';
            RETURN wmessage;
        END IF;
        UPDATE empresatransporte SET empreTraAct=TRUE,
                            usr_update      = wuser_update,
                                usr_update_rol  = wuser_update_rol,
                                fec_update      = now()
        WHERE empreTranit = wnit_empresatransporte;
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage = 'Error en la activación';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_active_producto(wcod_producto producto.producCod%TYPE,
                                                wuser_update producto.usr_update%TYPE,
                                                wuser_update_rol  producto.usr_update_rol%TYPE) RETURNS VARCHAR AS
$BODY$

    DECLARE wproducto producto.producCod%TYPE;
    DECLARE wmessage VARCHAR;
    BEGIN
        wmessage = '00000';
        SELECT producCod INTO wproducto FROM producto WHERE producCod=wcod_producto FOR UPDATE;
        IF NOT FOUND THEN
            wmessage = 'El producto no se encuentra registrado';
            RETURN wmessage;
        END IF;
        UPDATE producto SET producAct=TRUE,
                            usr_update      = wuser_update,
                                usr_update_rol  = wuser_update_rol,
                                fec_update      = now()
        WHERE producCod = wcod_producto;
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage = 'Error en la activación';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_active_proveedor(wnit_proveedor proveedor.proveeNit%TYPE,
                                                wuser_update proveedor.usr_update%TYPE,
                                                wuser_update_rol  proveedor.usr_update_rol%TYPE) RETURNS VARCHAR AS
$BODY$

    DECLARE wproveedor proveedor.proveeNit%TYPE;
    DECLARE wmessage VARCHAR;
    BEGIN
        wmessage = '00000';
        SELECT proveeNit INTO wproveedor FROM proveedor WHERE proveeNit=wnit_proveedor FOR UPDATE;
        IF NOT FOUND THEN
            wmessage = 'El proveedor no se encuentra registrado';
            RETURN wmessage;
        END IF;
        UPDATE proveedor SET proveeAct=TRUE,
                            usr_update      = wuser_update,
                                usr_update_rol  = wuser_update_rol,
                                fec_update      = now()
        WHERE proveeNit = wnit_proveedor;
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage = 'Error en la activación';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_active_sesion_admin() RETURNS VARCHAR AS
$BODY$
    DECLARE wmessage VARCHAR;
    DECLARE wsesion parametros.sesionActiva%TYPE;
    BEGIN
        wmessage = '00000';
        SELECT sesionActiva INTO wsesion FROM parametros FOR UPDATE;
        UPDATE parametros SET sesionActiva=TRUE;
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage = 'Error en la activación';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_active_sesion_cliente(wid cliente.clientDoc%TYPE) RETURNS VARCHAR AS
$BODY$
    DECLARE wmessage VARCHAR;
    DECLARE wsesion cliente.sesionActiva%TYPE;
    BEGIN
        wmessage = '00000';
        SELECT sesionActiva INTO wsesion FROM cliente WHERE clientDoc=wid FOR UPDATE;
        UPDATE cliente SET sesionActiva=TRUE WHERE clientDoc=wid;
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage = 'Error en la activación';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_active_sesion_otros(wid usuario.usuarioDoc%TYPE, wrol usuario.usuarioRol%TYPE) RETURNS VARCHAR AS
$BODY$
    DECLARE wmessage VARCHAR;
    DECLARE wsesion usuario.sesionActiva%TYPE;
    BEGIN
        wmessage = '00000';
        SELECT sesionActiva INTO wsesion FROM usuario WHERE usuarioDoc=wid AND usuarioRol=wrol FOR UPDATE;
        UPDATE usuario SET sesionActiva=TRUE WHERE usuarioDoc=wid AND usuarioRol=wrol;
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage = 'Error en la activación';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_active_usuario(wdoc_usuario usuario.usuariodoc%TYPE,
                                                wrol_usuario usuario.usuariorol%TYPE,
                                                wuser_update usuario.usr_update%TYPE,
                                                wuser_update_rol  usuario.usr_update_rol%TYPE) RETURNS VARCHAR AS
$BODY$
    DECLARE wusuario usuario.usuarioDoc%TYPE;
    DECLARE wmessage VARCHAR;
    BEGIN
        wmessage = '00000';
        SELECT usuarioDoc INTO wusuario FROM usuario WHERE usuarioDoc=wdoc_usuario AND usuariorol=wrol_usuario FOR UPDATE;
        IF NOT FOUND THEN
            wmessage = 'El usuario no se encuentra registrado';
            RETURN wmessage;
        END IF;
        UPDATE usuario SET usuarioAct=TRUE,
                            usr_update      = wuser_update,
                                usr_update_rol  = wuser_update_rol,
                                fec_update      = now()
        WHERE usuariodoc = wdoc_usuario AND usuariorol=wrol_usuario;
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage = 'Error en la activación';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_assign_mensajero(  wnum_envio envio.envioNum%TYPE,
                                                wdoc_usuario usuario.usuariodoc%TYPE,
                                                wuser_update envio.usr_update%TYPE,
                                                wuser_update_rol  envio.usr_update_rol%TYPE) RETURNS VARCHAR AS
$BODY$
    DECLARE wreg_usuario RECORD;
    DECLARE wreg_envio RECORD;
    DECLARE wmessage VARCHAR;
    BEGIN
        wmessage = '00000';
        SELECT envioNum, numVenta INTO wreg_envio FROM envio WHERE envioNum=wnum_envio FOR UPDATE;
        IF NOT FOUND THEN
            wmessage = 'El envío no se encuentra registrado';
            RETURN wmessage;
        END IF;
        IF wreg_envio.numVenta < 0 THEN
            wmessage = 'La venta debe cobrarse para asignar un mensajero al envío';
            RETURN wmessage;
        END IF;
        SELECT usuarioDoc, usuarioAct INTO wreg_usuario FROM usuario WHERE usuarioDoc=wdoc_usuario AND usuariorol='Mensajero';
        IF NOT FOUND THEN
            wmessage = 'El mensajero no se encuentra registrado';
            RETURN wmessage;
        END IF;
        IF wreg_usuario.usuarioAct = false THEN
            wmessage = 'El mensajero no se encuentra activo en el sistema';
            RETURN wmessage;
        END IF;
        UPDATE envio SET docUsuario = wdoc_usuario,
                                rolUsuario = 'Mensajero',
                                envioSal = true,
                                fec_salida = now(),
                                usr_update      = wuser_update,
                                usr_update_rol  = wuser_update_rol,
                                fec_update      = now()
        WHERE envioNum = wnum_envio;
        IF NOT FOUND THEN
            wmessage = 'Error en la asignación';
            RETURN wmessage;
        END IF;
        RETURN wmessage;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_delete_bandeja(wnum_bandeja bandeja.bandejaNum%TYPE,
                                                wnom_estante bandeja.nomEstant%TYPE) RETURNS VARCHAR AS
$BODY$
    DECLARE wmessage VARCHAR;
    DECLARE wbandeja bandeja.bandejaNum%TYPE;
    BEGIN
        wmessage='00000';
        SELECT bandejaNum INTO wbandeja FROM bandeja WHERE bandejaNum = wnum_bandeja AND nomEstant = wnom_estante FOR UPDATE;
        DELETE FROM bandeja
        WHERE  bandejaNum = wnum_bandeja AND nomEstant = wnom_estante;
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage='Error al eliminar';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION fun_delete_cliente(wdoc_cliente cliente.clientdoc%TYPE,
                                                wuser_update cliente.usr_update%TYPE,
                                                wuser_update_rol  cliente.usr_update_rol%TYPE) RETURNS VARCHAR AS
$BODY$

    DECLARE wcliente cliente.clientDoc%TYPE;
    DECLARE wventa venta.docClient%TYPE;
    DECLARE wmessage VARCHAR;
    BEGIN
        wmessage = '00000';
        SELECT clientDoc INTO wcliente FROM cliente WHERE clientDoc=wdoc_cliente FOR UPDATE;
        IF NOT FOUND THEN
            wmessage = 'El cliente no se encuentra registrado';
            RETURN wmessage;
        END IF;
        SELECT docClient INTO wventa FROM venta WHERE docClient=wdoc_cliente;
        IF wventa IS NULL THEN
            DELETE FROM cliente
            WHERE clientDoc = wdoc_cliente;
            IF FOUND THEN
                RETURN wmessage;
            ELSE
                wmessage = 'Error en la eliminación';
                RETURN wmessage;
            END IF;
        ELSE
            UPDATE cliente SET clientAct = FALSE,
                                sesionActiva = FALSE,
                                usr_update      = wuser_update,
                                usr_update_rol  = wuser_update_rol,
                                fec_update      = now()  
            WHERE clientDoc = wdoc_cliente;
            IF FOUND THEN
                RETURN wmessage;
            ELSE
                wmessage = 'Error en la desactivación';
                RETURN wmessage;
            END IF;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION fun_delete_contactenos( wid_contactenos	contactenos.contacId%TYPE) RETURNS VARCHAR AS
$BODY$
    DECLARE wcontac contactenos.contacId%TYPE;
    DECLARE wmessage VARCHAR;
    BEGIN
        wmessage = '00000';
        SELECT contacId INTO wcontac FROM contactenos WHERE contacId=wid_contactenos FOR UPDATE;
        IF NOT FOUND THEN
            wmessage = 'El registro no se encuentra registrado';
            RETURN wmessage;
        END IF;
        DELETE FROM contactenos
        WHERE contacId = wid_contactenos;
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage = 'Error en la eliminación';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION fun_delete_empresa(wnit_empresa empresatransporte.empreTraNit%TYPE,
                                                wuser_update empresatransporte.usr_update%TYPE,
                                                wuser_update_rol  empresatransporte.usr_update_rol%TYPE) RETURNS VARCHAR AS
$BODY$
    DECLARE wmessage VARCHAR;
    DECLARE wempresa empresatransporte.empreTraNit%TYPE;
    DECLARE wenvio empresatransporte.empreTraNit%TYPE;
    BEGIN
        wmessage = '00000';
        SELECT empreTraNit INTO wempresa FROM empresatransporte WHERE empreTraNit=wnit_empresa FOR UPDATE;
        IF NOT FOUND THEN
            wmessage = 'La empresa de transporte no se encuentra registrada';
            RETURN wmessage;
        END IF;
        SELECT nitEmpreTra INTO wenvio FROM envio WHERE nitEmpreTra=wnit_empresa;
        IF NOT FOUND THEN
            DELETE FROM empresatransporte
            WHERE empreTraNit = wnit_empresa;
            IF FOUND THEN
                RETURN wmessage;
            ELSE
                wmessage = 'Error en la eliminación';
                RETURN wmessage;
            END IF;
        ELSE
            UPDATE empresatransporte SET empreTraAct = FALSE,
                                usr_update      = wuser_update,
                                usr_update_rol  = wuser_update_rol,
                                fec_update      = now()
            WHERE empreTraNit = wnit_empresa;
            IF FOUND THEN
                RETURN wmessage;
            ELSE
                wmessage = 'Error en la desactivación';
                RETURN wmessage;
            END IF;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_delete_estante( wnom_estante	estante.estantNom%TYPE) RETURNS VARCHAR AS
$BODY$
    DECLARE west estante.estantNom%TYPE;
    DECLARE wmessage VARCHAR;
    DECLARE westante estante.estantNom%TYPE;
    BEGIN
        wmessage='00000';
        SELECT estantNom INTO westante FROM estante WHERE estantNom = wnom_estante FOR UPDATE;
        SELECT nomestant INTO west FROM bandeja WHERE nomestant=wnom_estante;
        IF  NOT FOUND THEN
            DELETE FROM estante
            WHERE estantNom = wnom_estante;
            IF FOUND THEN
                RETURN wmessage;
            ELSE
                wmessage='Error al eliminar';
                RETURN wmessage;
            END IF;
        ELSE
            wmessage='El estante no se puede eliminar porque está asociado a alguna bandeja';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_delete_linea( wid_linea	linea.lineaId%TYPE) RETURNS VARCHAR AS
$BODY$
    DECLARE wlin linea.lineaId%TYPE;
    DECLARE wmessage VARCHAR;
    DECLARE wlinea linea.lineaId%TYPE;
    BEGIN
        wmessage='00000';
        SELECT lineaId INTO wlinea FROM linea WHERE lineaId=wid_linea FOR UPDATE;
        SELECT idlinea INTO wlin FROM producto WHERE idlinea=wid_linea;
        IF  NOT FOUND THEN
            DELETE FROM linea
            WHERE lineaId = wid_linea;
            IF FOUND THEN
                RETURN wmessage;
            ELSE
                wmessage='Error al eliminar';
                RETURN wmessage;
            END IF;
        ELSE
            wmessage='La línea no se puede eliminar porque está asociada a algún producto';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_delete_marca( wid_marca	marca.marcaId%TYPE) RETURNS VARCHAR AS
$BODY$
    DECLARE wmar marca.marcaId%TYPE;
    DECLARE wmessage VARCHAR;
    DECLARE wmarca marca.marcaId%TYPE;
    BEGIN
        wmessage='00000';
        SELECT marcaId INTO wmarca FROM marca WHERE marcaId=wid_marca FOR UPDATE;
        SELECT idmarca INTO wmar FROM producto WHERE idmarca=wid_marca;
        IF  NOT FOUND THEN
            DELETE FROM marca
            WHERE marcaId = wid_marca;
            IF FOUND THEN
                RETURN wmessage;
            ELSE
                wmessage='Error al eliminar';
                RETURN wmessage;
            END IF;
        ELSE
            wmessage='La marca no se puede eliminar porque está asociada a algún producto';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_delete_producto(wcod_producto producto.producCod%TYPE,
                                                wuser_update producto.usr_update%TYPE,
                                                wuser_update_rol  producto.usr_update_rol%TYPE) RETURNS VARCHAR AS
$BODY$

    DECLARE wproducto producto.producCod%TYPE;
    DECLARE wpedido detallepedido.codProduc%TYPE;
    DECLARE wventa detalleventa.codProduc%TYPE;
    DECLARE wmessage VARCHAR;
    BEGIN
        wmessage = '00000';
        SELECT producCod INTO wproducto FROM producto WHERE producCod=wcod_producto FOR UPDATE;
        IF NOT FOUND THEN
            wmessage = 'El producto no se encuentra registrado';
            RETURN wmessage;
        END IF;
        SELECT codProduc INTO wpedido FROM detallepedido WHERE codProduc=wcod_producto;
        SELECT codProduc INTO wventa FROM detalleventa WHERE codProduc=wcod_producto;
        IF wpedido IS NULL AND wventa IS NULL THEN
            DELETE FROM producto
            WHERE producCod = wcod_producto;
            IF FOUND THEN
                RETURN wmessage;
            ELSE
                wmessage = 'Error en la eliminación';
                RETURN wmessage;
            END IF;
        ELSE
            UPDATE producto SET producAct = FALSE, 
                                usr_update      = wuser_update,
                                usr_update_rol  = wuser_update_rol,
                                fec_update      = now()
            WHERE producCod = wcod_producto;
            IF FOUND THEN
                RETURN wmessage;
            ELSE
                wmessage = 'Error en la desactivación';
                RETURN wmessage;
            END IF;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_delete_proveedor(wnit_proveedor proveedor.proveeNit%TYPE,
                                                wuser_update proveedor.usr_update%TYPE,
                                                wuser_update_rol  proveedor.usr_update_rol%TYPE) RETURNS VARCHAR AS
$BODY$

    DECLARE wproveedor proveedor.proveeNit%TYPE;
    DECLARE wpedido pedidoproveedor.nitProvee%TYPE;
    DECLARE wmessage VARCHAR;
    BEGIN
        wmessage = '00000';
        SELECT proveeNit INTO wproveedor FROM proveedor WHERE proveeNit=wnit_proveedor FOR UPDATE;
        IF NOT FOUND THEN
            wmessage = 'El proveedor no se encuentra registrado';
            RETURN wmessage;
        END IF;
        SELECT nitProvee INTO wpedido FROM pedidoproveedor WHERE nitProvee=wnit_proveedor;
        IF wpedido IS NULL THEN
            DELETE FROM proveedor
            WHERE proveeNit = wnit_proveedor;
            IF FOUND THEN
                RETURN wmessage;
            ELSE
                wmessage = 'Error en la eliminación';
                RETURN wmessage;
            END IF;
        ELSE
            UPDATE proveedor SET proveeAct = FALSE,
                                usr_update      = wuser_update,
                                usr_update_rol  = wuser_update_rol,
                                fec_update      = now()
            WHERE proveeNit = wnit_proveedor;
            IF FOUND THEN
                RETURN wmessage;
            ELSE
                wmessage = 'Error en la desactivación';
                RETURN wmessage;
            END IF;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_delete_seccion(wnom_estante        seccion.nomEstant%TYPE, 
                                                wnum_bandeja       seccion.numBandeja%TYPE,
                                                wcod_seccion       seccion.seccionCod%TYPE) RETURNS VARCHAR AS
$BODY$
    DECLARE wmessage VARCHAR;
    DECLARE wseccion seccion.seccionCod%TYPE;
    BEGIN
        wmessage='00000';
        SELECT seccionCod INTO wseccion FROM seccion WHERE  nomEstant = wnom_estante AND numBandeja = wnum_bandeja AND seccionCod = wcod_seccion FOR UPDATE;
        DELETE FROM seccion
        WHERE  nomEstant = wnom_estante AND numBandeja = wnum_bandeja AND seccionCod = wcod_seccion;
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage='Error al eliminar';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION fun_delete_tipoproducto( wid_tipoproducto	tipoproducto.tipoProId%TYPE) RETURNS VARCHAR AS
$BODY$
    DECLARE wtip tipoproducto.tipoProId%TYPE;
    DECLARE wmessage VARCHAR;
    DECLARE wtipopro tipoproducto.tipoProId%TYPE;
    BEGIN
        wmessage='00000';
        SELECT tipoProId INTO wtipopro FROM tipoproducto WHERE tipoProId=wid_tipoproducto FOR UPDATE;
        SELECT idTipoPro INTO wtip FROM producto WHERE idTipoPro=wid_tipoproducto;
        IF  NOT FOUND THEN
            DELETE FROM tipoproducto
            WHERE tipoProId = wid_tipoproducto;
            IF FOUND THEN
                RETURN wmessage;
            ELSE
                wmessage='Error en la eliminación';
                RETURN wmessage;
            END IF;
        ELSE
            wmessage='No se puede eliminar porque hay productos pertenecientes a esta categoría';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_disable_sesion_cliente(wid cliente.clientDoc%TYPE) RETURNS VARCHAR AS
$BODY$
    DECLARE wmessage VARCHAR;
    DECLARE wsesion cliente.sesionActiva%TYPE;
    BEGIN
        wmessage = '00000';
        SELECT sesionActiva INTO wsesion FROM cliente WHERE clientDoc=wid FOR UPDATE;
        UPDATE cliente SET sesionActiva=FALSE WHERE clientDoc=wid;
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage = 'Error en la desactivación';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_disable_sesion_otros(wid usuario.usuarioDoc%TYPE, wrol usuario.usuarioRol%TYPE) RETURNS VARCHAR AS
$BODY$
    DECLARE wmessage VARCHAR;
    DECLARE wsesion usuario.sesionActiva%TYPE;
    BEGIN
        wmessage = '00000';
        SELECT sesionActiva INTO wsesion FROM usuario WHERE usuarioDoc=wid AND usuarioRol=wrol FOR UPDATE;
        UPDATE usuario SET sesionActiva=FALSE WHERE usuarioDoc=wid AND usuarioRol=wrol;
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage = 'Error en la desactivación';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_disable_sesion() RETURNS VARCHAR AS
$BODY$
    DECLARE wmessage VARCHAR;
    DECLARE wsesion parametros.sesionActiva%TYPE;
    BEGIN
        wmessage = '00000';
        SELECT sesionActiva INTO wsesion FROM parametros FOR UPDATE;
        UPDATE parametros SET sesionActiva=FALSE;
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage = 'Error en la desactivación';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_disable_usuario(wdoc_usuario usuario.usuarioDoc%TYPE, wrol_usuario usuario.usuarioRol%TYPE,
                                                wuser_update usuario.usr_update%TYPE,
                                                wuser_update_rol  usuario.usr_update_rol%TYPE) RETURNS VARCHAR AS
$BODY$
    DECLARE wusuario RECORD;
    DECLARE wmessage VARCHAR;
    BEGIN
        wmessage = '00000';
        SELECT usuarioDoc, usuarioRol INTO wusuario FROM usuario WHERE usuarioDoc=wdoc_usuario AND usuarioRol=wrol_usuario FOR UPDATE;
        IF NOT FOUND THEN
            wmessage = 'El usuario no se encuentra registrado';
            RETURN wmessage;
        END IF;
        UPDATE usuario SET usuarioAct = FALSE,
                            sesionActiva = FALSE,
                                usr_update      = wuser_update,
                                usr_update_rol  = wuser_update_rol,
                                fec_update      = now()
        WHERE usuarioDoc = wdoc_usuario AND usuarioRol=wrol_usuario;
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage = 'Error en la desactivación';
            RETURN wmessage;
        END IF;
        
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_finish_shipping(wnum_envio envio.envionum%TYPE,
                                                wempresa envio.nitEmpreTra%TYPE) RETURNS VARCHAR AS
$BODY$
    DECLARE wenvio envio.envioNum%TYPE;
    DECLARE wmessage VARCHAR;
    BEGIN
        SELECT envioNum INTO wenvio FROM envio WHERE envioNum=wnum_envio FOR UPDATE;
        IF NOT FOUND THEN
            wmessage = 'El envío no se encuentra registrado';
            RETURN wmessage;
        END IF;
        IF wempresa IS NULL OR wempresa='' THEN
            UPDATE envio SET    envioEnt=TRUE,
                                fec_entrega=now()
            WHERE envioNum = wnum_envio;
            IF FOUND THEN
                wmessage = TO_CHAR(wnum_envio, 'FM99999');
                RETURN wmessage;
            ELSE
                wmessage = 'Error en la finalización del envío';
                RETURN wmessage;
            END IF;
        ELSE
            UPDATE envio SET    nitEmpreTra=wempresa,
                            envioEnt=TRUE,
                            fec_entrega=now()
            WHERE envioNum = wnum_envio;
            IF FOUND THEN
                wmessage = TO_CHAR(wnum_envio, 'FM99999');
                RETURN wmessage;
            ELSE
                wmessage = 'Error en la finalización del envío';
                RETURN wmessage;
            END IF;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION fun_insert_bandeja(wnum_bandeja bandeja.bandejaNum%TYPE,
                                                wnom_estante bandeja.nomEstant%TYPE,
                                                wuser_insert bandeja.usr_insert%TYPE,
                                                wuser_insert_rol  bandeja.usr_insert_rol%TYPE) RETURNS VARCHAR AS                                           
$BODY$
	DECLARE wbandeja RECORD;
    DECLARE wmessage VARCHAR;
    BEGIN
		wmessage='00000';
		SELECT bandejaNum, nomEstant INTO wbandeja from bandeja 
		WHERE  bandejaNum = wnum_bandeja AND nomEstant = wnom_estante;
		IF FOUND THEN
			wmessage = 'La bandeja en este estante ya se encuentra registrada';
			RETURN wmessage;
		END IF;
        INSERT INTO bandeja(nomEstant,bandejaNum,usr_insert,usr_insert_rol) VALUES(wnom_estante, wnum_bandeja,wuser_insert,wuser_insert_rol);
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage='Error al insertar';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_insert_cliente(wdoc_cliente cliente.clientDoc%TYPE,wid_ciudad ciudad.ciudadId%TYPE,
											wnom_cliente cliente.clientNom%TYPE,
                                            wdir_cliente cliente.clientDir%TYPE,wtel_cliente cliente.clientTel%TYPE,
											wema_cliente cliente.clientEma%TYPE,
											wcon_cliente cliente.clientCon%TYPE, wuser_insert cliente.usr_insert%TYPE,
                                            wuser_insert_rol  cliente.usr_insert_rol%TYPE) RETURNS VARCHAR AS
$BODY$
	DECLARE wcliente cliente.clientDoc%TYPE;
    DECLARE wciudad ciudad.ciudadId%TYPE;
    DECLARE wmessage VARCHAR;
    BEGIN
        wmessage = '00000';
        SELECT clientDoc INTO wcliente FROM cliente WHERE clientDoc=wdoc_cliente;
        IF FOUND THEN
            wmessage = 'Este documento se encuentra ya registrado en la bd, olvídelo';
            RETURN wmessage;
        END IF;
        SELECT ciudadId INTO wciudad FROM ciudad WHERE ciudadId=wid_ciudad;
        IF NOT FOUND THEN
            wmessage = 'Esta ciudad no se encuentra registrada';
            RETURN wmessage;
        END IF;
        INSERT INTO cliente(clientDoc,idciudad,clientNom,clientDir,clientTel,clientEma,clientCon,usr_insert,usr_insert_rol) 
        VALUES(wdoc_cliente,wid_ciudad, wnom_cliente, wdir_cliente, wtel_cliente,
								wema_cliente, MD5(wcon_cliente), wuser_insert, wuser_insert_rol);
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage = 'Error en la inserción';
            RETURN wmessage;
        END IF;

    END;
$BODY$
LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION fun_insert_contactenos( wnom_contactenos	contactenos.contacNom%TYPE,
                                                    wtel_contactenos	contactenos.contacTel%TYPE,
                                                    wema_contactenos	contactenos.contacEma%TYPE,
                                                    wasu_contactenos	contactenos.contacAsu%TYPE) RETURNS VARCHAR AS                                           
$BODY$
	DECLARE 
		wcontador 		contactenos.contacId%TYPE;
		wmessage		VARCHAR;
    BEGIN
		wmessage = '00000';
		SELECT max(contacId) INTO wcontador FROM contactenos;
		IF wcontador IS NULL THEN
			wcontador = 0;
		END IF;
		wcontador = wcontador + 1;
        INSERT INTO contactenos VALUES(wcontador, wnom_contactenos, wtel_contactenos, wema_contactenos, wasu_contactenos);
        IF FOUND THEN
            RETURN wmessage;
        ELSE
			wmessage = 'Error en la inserción';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION fun_insert_empresa(	wnit_empresa empresatransporte.empreTraNit%TYPE, 
                                                wnom_empresa empresatransporte.empreTraNom%TYPE, 
												wtel_empresa empresatransporte.empreTraTel%TYPE,wuser_insert empresatransporte.usr_insert%TYPE,
                                                wuser_insert_rol  empresatransporte.usr_insert_rol%TYPE) RETURNS VARCHAR AS         
$BODY$
	DECLARE wempresa empresatransporte.empreTraNit%TYPE;
	DECLARE wmessage VARCHAR;
    BEGIN
		wmessage = '00000';
		SELECT empreTraNit into wempresa from empresatransporte WHERE empreTraNit = wnit_empresa;
		IF FOUND THEN
			wmessage = 'La empresa de transporte ya se encuentra registrada';
			RETURN wmessage;
		END IF;
        INSERT INTO empresatransporte(empreTraNit, empreTraNom, empreTraTel, usr_insert, usr_insert_rol) 
                                    VALUES(wnit_empresa, wnom_empresa, wtel_empresa, wuser_insert, wuser_insert_rol);
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage = 'Error en la inserción';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_insert_estante( wnom_estante	estante.estantNom%TYPE,
                                                wuser_insert estante.usr_insert%TYPE,
                                                wuser_insert_rol  estante.usr_insert_rol%TYPE) RETURNS VARCHAR AS                                           
$BODY$
    DECLARE wmessage VARCHAR;
	DECLARE 
		westante 	estante.estantNom%TYPE;
    BEGIN
		wmessage='00000';
		SELECT estantNom INTO westante from estante 
		WHERE estantNom = wnom_estante;
		IF FOUND THEN
			wmessage = 'El estante de productos ya se encuentra registrado';
			RETURN wmessage;
		END IF;
        INSERT INTO estante(estantNom, usr_insert, usr_insert_rol) VALUES(wnom_estante, wuser_insert, wuser_insert_rol);
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage='Error al insertar';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_insert_linea( wnom_linea	linea.lineaNom%TYPE,
                                            wuser_insert linea.usr_insert%TYPE,
                                            wuser_insert_rol  linea.usr_insert_rol%TYPE) RETURNS VARCHAR AS                                           
$BODY$
	DECLARE 
		wlinea 	linea.lineaNom%TYPE;
		wcontador 		linea.lineaId%TYPE;
        wmessage VARCHAR;
    BEGIN
		wmessage='00000';
		SELECT lineaNom INTO wlinea from linea 
		WHERE lineaNom = wnom_linea;
		IF FOUND THEN
			wmessage = 'La línea de producto ya se encuentra registrada';
			RETURN wmessage;
		END IF;
		SELECT max(lineaId) INTO wcontador FROM linea;
		IF wcontador IS NULL THEN
			wcontador = 0;
		END IF;
		wcontador = wcontador + 1;
        INSERT INTO linea(lineaId,lineaNom,usr_insert,usr_insert_rol) 
					VALUES(wcontador, wnom_linea,wuser_insert,wuser_insert_rol);
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage = 'Error en la inserción';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_insert_marca( wnom_marca	marca.marcaNom%TYPE,
                                            wuser_insert marca.usr_insert%TYPE,
                                            wuser_insert_rol  marca.usr_insert_rol%TYPE) RETURNS VARCHAR AS                                           
$BODY$
	DECLARE 
		wmarca 	marca.marcaNom%TYPE;
		wcontador 		marca.marcaId%TYPE;
        wmessage VARCHAR;
    BEGIN
        wmessage = '00000';
		SELECT marcaNom INTO wmarca from marca 
		WHERE marcaNom = wnom_marca;
		IF FOUND THEN
			wmessage = 'La marca de producto ya se encuentra registrada';
			RETURN wmessage;
		END IF;
		SELECT max(marcaId) INTO wcontador FROM marca;
		IF wcontador IS NULL THEN
			wcontador = 0;
		END IF;
		wcontador = wcontador + 1;
        INSERT INTO marca(marcaId,marcaNom,usr_insert,usr_insert_rol) 
                    VALUES(wcontador, wnom_marca, wuser_insert, wuser_insert_rol);
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage = 'Error en la inserción';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_insert_observacion(wnum_envio envio.envionum%TYPE,
                                                    wobs_envio envio.envioobs%TYPE) RETURNS VARCHAR AS
$BODY$
    DECLARE wenvio envio.envioNum%TYPE;
    DECLARE wmessage VARCHAR;
    BEGIN
        wmessage = '00000';
        SELECT envioNum INTO wenvio FROM envio WHERE envioNum=wnum_envio FOR UPDATE;
        IF NOT FOUND THEN
            wmessage = 'El envío no se encuentra registrado';
            RETURN wmessage;
        END IF;
        UPDATE envio SET envioObs=wobs_envio 
        WHERE envioNum = wnum_envio;
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage = 'Error en la inserción de la observación del envío';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_insert_pedidoproveedor(wnum_pedido pedidoproveedor.pedidoNum%TYPE, wnit_proveedor proveedor.proveeNit%TYPE,
                                                    wtipopago pedidoproveedor.tipopago%TYPE, wtotal_pedido pedidoproveedor.pedidoTotal%TYPE,
                                                    wcod_producto VARCHAR[], wnom_producto VARCHAR[], wmod_producto VARCHAR[], wpre_producto DECIMAL(8,0)[],
                                                    wcat_producto DECIMAL(2,0)[], wlin_producto DECIMAL(2,0)[], wmar_producto DECIMAL(3,0)[],
                                                    wcan_producto DECIMAL(3,0)[], wcos_producto DECIMAL(7,0)[], wparcial_producto DECIMAL(8,0)[],
                                                    wuser_insert pedidoproveedor.usr_insert%TYPE,
                                                    wuser_insert_rol  pedidoproveedor.usr_insert_rol%TYPE) RETURNS VARCHAR AS
$$
    DECLARE wmessage VARCHAR;
    DECLARE wpedido  record;
    DECLARE wproveedor proveedor.proveeNit%TYPE;
    DECLARE i INTEGER;
    DECLARE cantarray_prod INTEGER = array_length(wcod_producto, 1);
    DECLARE wreg_producto RECORD;
    DECLARE wnewStock INTEGER;
    DECLARE wporcentaje parametros.porcenIva%TYPE;
    DECLARE wiva pedidoproveedor.pedidoIva%TYPE;

    BEGIN
        wmessage='00000';
        SELECT pedidoNum, nitProvee INTO wpedido FROM pedidoproveedor
        WHERE pedidoNum = wnum_pedido AND nitProvee=wnit_proveedor;         --Verificar la no existenia del número de pedido a ese proveedor
        IF FOUND THEN
            wmessage = 'El número de pedido ya se encuentra registrado';
            RETURN wmessage;
        END IF;
        SELECT p.proveeNit INTO wproveedor FROM proveedor p
        WHERE p.proveeNit = wnit_proveedor;                                  --Verificar existencia del proveedor
        IF NOT FOUND THEN
            wmessage = 'El proveedor no se encuentra registrado';
            RETURN wmessage;
        END IF;
        SELECT porcenIva INTO wporcentaje FROM parametros;                   --extraer porcentaje iva actual en Colombia
        IF NOT FOUND THEN
            wmessage = 'El porcentaje de iva no se encontró';
            RETURN wmessage;
        END IF;
        wiva = (wtotal_pedido * wporcentaje)/100;

        IF wtipopago != 'Ninguno' THEN
            INSERT INTO pedidoproveedor(pedidoNum, nitProvee, tipopago, pedidoTotal, pedidoIva, pedidoPag, usr_insert, usr_insert_rol) 
                        VALUES(wnum_pedido, wnit_proveedor, wtipopago, wtotal_pedido, wiva, TRUE, wuser_insert, wuser_insert_rol);
            IF NOT FOUND THEN
                wmessage = 'El número de pedido % al proveedor % no se ha insertado', wnum_pedido, wnit_proveedor;
                RETURN wmessage;
            END IF;
        ELSE
            INSERT INTO pedidoproveedor(pedidoNum, nitProvee, tipopago, pedidoTotal, pedidoIva, pedidoPag, usr_insert,usr_insert_rol) 
            VALUES(wnum_pedido, wnit_proveedor, wtipopago, wtotal_pedido, wiva, FALSE, wuser_insert, wuser_insert_rol);
            IF NOT FOUND THEN
                wmessage = 'El número de pedido % al proveedor % no se ha insertado', wnum_pedido, wnit_proveedor;
                RETURN wmessage;
            END IF;
        END IF;

        i=1;
        wnewStock = 0;
        FOR i in 1..cantarray_prod LOOP
            SELECT pr.producCod, pr.producNom, pr.producMod, pr.producPre, pr.producSto into wreg_producto FROM producto pr
            WHERE pr.producCod = wcod_producto[i] FOR UPDATE;
            IF NOT FOUND THEN
                insert into producto(producCod, idTipoPro, idLinea, idMarca, producNom, producMod, producSto, producPre, usr_insert,usr_insert_rol) VALUES(
                    wcod_producto[i], wcat_producto[i], wlin_producto[i], wmar_producto[i], wnom_producto[i], wmod_producto[i],0,
                    wpre_producto[i], wuser_insert, wuser_insert_rol);
                IF NOT FOUND THEN
                    wmessage = 'El producto % no se ha podido registrar', wcod_producto[i];
                    ROLLBACK;
                    RETURN wmessage;
                END IF;
            END IF;
            INSERT INTO detallepedido(numpedido, nitProvee, codProduc, detPedCan, detPedCos, detPedValPar,usr_insert,usr_insert_rol) VALUES(
                wnum_pedido, wnit_proveedor, wcod_producto[i], wcan_producto[i], wcos_producto[i], wparcial_producto[i],
                wuser_insert, wuser_insert_rol
            );
            IF NOT FOUND THEN
                wmessage = 'El producto % no se ha podido insertar en el pedido % al proveedor %', wcod_producto[i], wnum_pedido, wnit_proveedor;
                ROLLBACK;
                RETURN wmessage;
            END IF;
            IF wreg_producto.producSto IS NULL THEN
                wreg_producto.producSto = 0;
            END IF;
            wnewStock = wreg_producto.producSto + wcan_producto[i];
            UPDATE producto SET producSto = wnewStock, usr_update=wuser_insert, usr_update_rol=wuser_insert_rol,fec_update=now() 
            WHERE producCod=wcod_producto[i];
            IF NOT FOUND THEN
                wmessage = 'No se ha podido actualizar el inventario del producto %', wcod_producto[i];
                ROLLBACK;
                RETURN wmessage;
            END IF;
        END LOOP;
        RETURN wmessage;
    END;
$$
LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION fun_insert_usuario(wdoc_usuario usuario.usuarioDoc%TYPE,
                                            wrol_usuario usuario.usuarioRol%TYPE,
											wnom_usuario usuario.usuarioNom%TYPE,
                                            wdir_usuario usuario.usuarioDir%TYPE,wtel_usuario usuario.usuarioTel%TYPE,
											wema_usuario usuario.usuarioEma%TYPE,
											wcon_usuario usuario.usuarioCon%TYPE,
                                            wuser_insert usuario.usr_insert%TYPE,
                                            wuser_insert_rol  usuario.usr_insert_rol%TYPE) RETURNS VARCHAR AS
$BODY$
	DECLARE wusuario record;
    DECLARE wmessage VARCHAR;
    BEGIN
        wmessage = '00000';
        SELECT usuarioDoc, usuarioRol INTO wusuario FROM usuario WHERE usuarioDoc=wdoc_usuario AND usuarioRol=wrol_usuario;
        IF FOUND THEN
            wmessage = 'Este usuario se encuentra ya registrado en la bd, olvídelo';
            RETURN wmessage;
        END IF;
        INSERT INTO usuario(usuarioDoc,usuarioRol,usuarioNom,usuarioDir,usuarioTel,usuarioEma,usuarioCon,usr_insert,usr_insert_rol) 
        VALUES(wdoc_usuario, wrol_usuario, wnom_usuario, wdir_usuario, wtel_usuario,
								wema_usuario, MD5(wcon_usuario), wuser_insert, wuser_insert_rol);
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage = 'Error en la inserción';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_insert_venta_cliente(wdoc_cliente cliente.clientDoc%TYPE,
                                            wcod_producto VARCHAR[], wcan_producto DECIMAL(3,0)[]) RETURNS VARCHAR AS
$$
    DECLARE wmessage VARCHAR;
    DECLARE i INTEGER;
    DECLARE wnum_venta parametros.numFacFal%TYPE;
    DECLARE cantarray_prod INTEGER = array_length(wcod_producto, 1);
    DECLARE wreg_producto RECORD;
    DECLARE wreg_cliente RECORD;
    DECLARE wruta VARCHAR;
    DECLARE wvalorparcial detalleventa.detVentaValPar%TYPE;
    DECLARE wpendientes INTEGER;
    BEGIN
        wmessage = '00000';
        wruta = '../facturas_ventas/' || wdoc_cliente;
        SELECT cl.clientDoc, cl.clientAct, d.departNom, c.ciudadNom INTO wreg_cliente FROM cliente cl 
        JOIN ciudad c ON cl.idCiudad=c.ciudadId JOIN departamento d ON c.idDepart=d.departId 
        WHERE clientDoc=wdoc_cliente;
        IF wreg_cliente.clientDoc IS NULL THEN
            wmessage = 'El cliente no se encuentra registrado';         --VALIDAMOS QUE EL CLIENTE ESTÉ REGISTRADO
            RETURN wmessage;
        END IF;

        IF wreg_cliente.clientAct = FALSE THEN
            wmessage = 'El cliente no está activo';                     --VALIDAMOS QUE EL CLIENTE ESTÉ ACTIVO
            RETURN wmessage;
        END IF;

        SELECT COUNT(ventaNum) INTO wpendientes FROM venta WHERE ventaRec=false AND docClient=wdoc_cliente;
        IF wpendientes > 0 THEN
            wmessage = 'El cliente tiene un pedido pendiente por pagar'; --VALIDAMOS QUE EL CLIENTE NO DEBA NINGÚN PEDIDO
            RETURN wmessage;
        END IF;

        SELECT numFacFal INTO wnum_venta FROM parametros FOR UPDATE;               --TRAEMOS NÚMERO DE FACTURA ACTUAL
        IF NOT FOUND THEN
            wmessage = 'No se pudo encontrar el útimo número falso de factura registrado';
            RETURN wmessage;
        END IF;
        IF wnum_venta IS NULL THEN
            wmessage = 'Debe asignar un valor para arranque de las facturas falsas o temporales';
            RETURN wmessage;
        END IF;
        wnum_venta = wnum_venta - 1;

        INSERT INTO venta(ventaNum, docClient, departamento, ciudad, tipopago, usr_insert, usr_insert_rol) 
                            VALUES(wnum_venta, wdoc_cliente, wreg_cliente.departNom, wreg_cliente.ciudadNom, 
                                    'Ninguno', wdoc_cliente, 'Cliente');
        IF NOT FOUND THEN
            wmessage = 'Error en la inserción';                 --INSERCIÓN EN CASO DE QUE EL TIPO DE PAGO SEA NINGUNO
            RETURN wmessage;
        END IF;

        i=1;
        FOR i in 1..cantarray_prod LOOP     -- INICIO DEL CICLO DE DETALLES --
            SELECT pr.producCod, pr.producSto, pr.producPre, pr.producAct INTO wreg_producto FROM producto pr 
            WHERE pr.producCod = wcod_producto[i];
            IF NOT FOUND THEN
                wmessage = 'El producto solicitado de referencia ' || wcod_producto[i] || ' no se ha encontrado';
                RETURN wmessage;                                        --VALIDAMOS EXISTENCIA DEL PRODUCTO
            END IF;
            IF wreg_producto.producAct = FALSE THEN
                wmessage = 'El producto de referencia ' || wcod_producto[i] || ' no se encuentra disponible para la venta';
                RETURN wmessage;                                        --VALIDAMOS QUE EL PRODUCTO ESTÉ DISPONIBLE PARA LA VENTA
            END IF;
            IF wcan_producto[i] > wreg_producto.producSto THEN
                wmessage = 'La cantidad solicitada del producto de referencia ' || wcod_producto[i] || ' sobrepasa las unidades disponibles';
                RETURN wmessage;                                        --VALIDAMOS SUFICIENCIA DE STOCK DEL PRODUCTO SOLICITADO
            END IF;

            wvalorparcial = wcan_producto[i] * wreg_producto.producPre;
            
            INSERT INTO detalleventa(numVenta, codProduc, detVentaCan, precioProduc, detVentaDes, detVentaValPar, usr_insert, usr_insert_rol) 
                        VALUES(wnum_venta, wcod_producto[i], wcan_producto[i], wreg_producto.producPre, 0, wvalorparcial, wdoc_cliente, 'Cliente');
            IF NOT FOUND THEN                                           --VALIDAMOS QUE SE HAYA HECHO LA INSERCIÓN DEL DETALLE DE VENTA
                wmessage = 'Error en la inserción del detalle de venta para el producto de referencia ' || wcod_producto[i];
                RETURN wmessage;
            END IF;
        END LOOP;   -- FIN DEL CICLO DE DETALLES --
        
        UPDATE parametros SET numFacFal = wnum_venta, usr_update=wdoc_cliente, usr_update_rol='Cliente';
        IF NOT FOUND THEN                                           --VALIDAMOS QUE LOS PUNTOS DEL CLIENTE SE HAYAN ACTUALIZADO
            wmessage = 'Error en la actualización del parámetro de número de factura actual';
            RETURN wmessage;
        END IF;
        RETURN wmessage;
    END;
$$

LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_insert_venta_domi(wdoc_cliente cliente.clientDoc%TYPE,
                                            wcod_producto VARCHAR[], wcan_producto DECIMAL(3,0)[],
                                            wciudad ciudad.ciudadId%TYPE, wdoc_recibe envio.envioDocDes%TYPE, wnom_recibe envio.envioNomDes%TYPE,
                                            wtel_recibe envio.envioTelDes%TYPE,
                                            wdir_recibe envio.envioDirDes%TYPE) RETURNS VARCHAR AS
$$
    DECLARE wmessage VARCHAR;
    DECLARE i INTEGER;
    DECLARE wnum_venta parametros.numFacFal%TYPE;
    DECLARE cantarray_prod INTEGER = array_length(wcod_producto, 1);
    DECLARE wreg_producto RECORD;
    DECLARE wreg_cliente RECORD;
    DECLARE wruta VARCHAR;
    DECLARE wvalorparcial detalleventa.detVentaValPar%TYPE;
    DECLARE wpendientes INTEGER;

    DECLARE wreg_ciudad RECORD;
    DECLARE wnum_envio envio.envioNum%TYPE;
    BEGIN
        wmessage = '00000';
        wruta = '../facturas_ventas/' || wdoc_cliente;
        SELECT cl.clientDoc, cl.clientAct, d.departNom, c.ciudadNom INTO wreg_cliente FROM cliente cl 
        JOIN ciudad c ON cl.idCiudad=c.ciudadId JOIN departamento d ON c.idDepart=d.departId 
        WHERE clientDoc=wdoc_cliente;
        IF wreg_cliente.clientDoc IS NULL THEN
            wmessage = 'El cliente no se encuentra registrado';         --VALIDAMOS QUE EL CLIENTE ESTÉ REGISTRADO
            RETURN wmessage;
        END IF;

        IF wreg_cliente.clientAct = FALSE THEN
            wmessage = 'El cliente no está activo';                     --VALIDAMOS QUE EL CLIENTE ESTÉ ACTIVO
            RETURN wmessage;
        END IF;

        SELECT COUNT(ventaNum) INTO wpendientes FROM venta WHERE ventaRec=false AND docClient=wdoc_cliente;
        IF wpendientes > 0 THEN
            wmessage = 'El cliente tiene un pedido pendiente por pagar'; --VALIDAMOS QUE EL CLIENTE NO DEBA NINGÚN PEDIDO
            RETURN wmessage;
        END IF;

        SELECT numFacFal INTO wnum_venta FROM parametros FOR UPDATE;               --TRAEMOS NÚMERO DE FACTURA ACTUAL
        IF NOT FOUND THEN
            wmessage = 'No se pudo encontrar el útimo número falso de factura registrado';
            RETURN wmessage;
        END IF;
        IF wnum_venta IS NULL THEN
            wmessage = 'Debe asignar un valor para arranque de las facturas falsas o temporales';
            RETURN wmessage;
        END IF;
        wnum_venta = wnum_venta - 1;

        SELECT ciudadId, precioDom INTO wreg_ciudad FROM ciudad WHERE ciudadId=wciudad;
        IF NOT FOUND THEN                                               --VERIFICAMOS EXISTENCIA DEL MUNICIPIO
            wmessage = 'Este municipio no se encuentra registrado';
            RETURN wmessage;
        END IF;

        SELECT max(envioNum) INTO wnum_envio FROM envio;
		IF wnum_envio IS NULL THEN
			wnum_envio = 0;
		END IF;
		wnum_envio = wnum_envio + 1;

        INSERT INTO venta(ventaNum, docClient, departamento, ciudad, tipopago, ventaDom, usr_insert, usr_insert_rol) 
                            VALUES(wnum_venta, wdoc_cliente, wreg_cliente.departNom, wreg_cliente.ciudadNom, 
                                    'Ninguno', TRUE, wdoc_cliente, 'Cliente');
        IF NOT FOUND THEN
            wmessage = 'Error en la inserción';                 --INSERCIÓN EN CASO DE QUE EL TIPO DE PAGO SEA NINGUNO
            RETURN wmessage;
        END IF;

        i=1;
        FOR i in 1..cantarray_prod LOOP     -- INICIO DEL CICLO DE DETALLES --
            SELECT pr.producCod, pr.producSto, pr.producPre, pr.producAct INTO wreg_producto FROM producto pr 
            WHERE pr.producCod = wcod_producto[i];
            IF NOT FOUND THEN
                wmessage = 'El producto solicitado de referencia ' || wcod_producto[i] || ' no se ha encontrado';
                RETURN wmessage;                                        --VALIDAMOS EXISTENCIA DEL PRODUCTO
            END IF;
            IF wreg_producto.producAct = FALSE THEN
                wmessage = 'El producto de referencia ' || wcod_producto[i] || ' no se encuentra disponible para la venta';
                RETURN wmessage;                                        --VALIDAMOS QUE EL PRODUCTO ESTÉ DISPONIBLE PARA LA VENTA
            END IF;
            IF wcan_producto[i] > wreg_producto.producSto THEN
                wmessage = 'La cantidad solicitada del producto de referencia ' || wcod_producto[i] || ' sobrepasa las unidades disponibles';
                RETURN wmessage;                                        --VALIDAMOS SUFICIENCIA DE STOCK DEL PRODUCTO SOLICITADO
            END IF;

            wvalorparcial = wcan_producto[i] * wreg_producto.producPre;
            
            INSERT INTO detalleventa(numVenta, codProduc, detVentaCan, precioProduc, detVentaDes, detVentaValPar, usr_insert, usr_insert_rol) 
                        VALUES(wnum_venta, wcod_producto[i], wcan_producto[i], wreg_producto.producPre, 0, wvalorparcial, wdoc_cliente, 'Cliente');
            IF NOT FOUND THEN                                           --VALIDAMOS QUE SE HAYA HECHO LA INSERCIÓN DEL DETALLE DE VENTA
                wmessage = 'Error en la inserción del detalle de venta para el producto de referencia ' || wcod_producto[i];
                RETURN wmessage;
            END IF;
        END LOOP;   -- FIN DEL CICLO DE DETALLES --
        
        UPDATE parametros SET numFacFal = wnum_venta, usr_update=wdoc_cliente, usr_update_rol='Cliente';
        IF NOT FOUND THEN                                           --VALIDAMOS QUE LOS PUNTOS DEL CLIENTE SE HAYAN ACTUALIZADO
            wmessage = 'Error en la actualización del parámetro de número de factura actual';
            RETURN wmessage;
        END IF;
        INSERT INTO envio(envioNum, numVenta, idCiudad, envioDocDes, envioNomDes, envioDirDes, envioTelDes, envioPre, usr_insert, usr_insert_rol) 
                VALUES(wnum_envio, wnum_venta, wreg_ciudad.ciudadId, wdoc_recibe, wnom_recibe, wdir_recibe, wtel_recibe, wreg_ciudad.precioDom, wdoc_cliente, 'Cliente');
        IF NOT FOUND THEN                                           --VALIDAMOS QUE LOS PUNTOS DEL CLIENTE SE HAYAN ACTUALIZADO
            wmessage = 'Error en la inserción del envío';
            RETURN wmessage;
        END IF;
        RETURN wmessage;
    END;
$$

LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_insert_venta(wdoc_cliente cliente.clientDoc%TYPE, wdepartamento venta.departamento%TYPE, 
                                            wciudad venta.ciudad%TYPE,wtipopago venta.tipopago%TYPE, wpuntos_cliente cliente.clientPun%TYPE,
                                            wcod_producto VARCHAR[], wcan_producto DECIMAL(3,0)[], wprecio_producto DECIMAL(8,0)[],
                                            wdes_producto DECIMAL(6,0)[], wparcial_producto DECIMAL(8,0)[],
                                            wusr_insert venta.usr_insert%TYPE, wusr_insert_rol venta.usr_insert_rol%TYPE,
                                            wventa_dom venta.ventaDom%TYPE,
                                            wciudad_id ciudad.ciudadId%TYPE, wdoc_recibe envio.envioDocDes%TYPE, wnom_recibe envio.envioNomDes%TYPE,
                                            wtel_recibe envio.envioTelDes%TYPE,
                                            wdir_recibe envio.envioDirDes%TYPE) RETURNS VARCHAR AS
$$
    DECLARE wmessage VARCHAR;
    DECLARE i INTEGER;
    DECLARE wnum_venta parametros.numFacIni%TYPE;
    DECLARE cantarray_prod INTEGER = array_length(wcod_producto, 1);
    DECLARE wreg_producto RECORD;
    DECLARE wreg_cliente RECORD;
    DECLARE wruta VARCHAR;
    DECLARE wpendientes INTEGER;
    DECLARE wfactura_falsa parametros.numFacFal%TYPE;

    DECLARE wnum_envio envio.envioNum%TYPE;
    DECLARE wreg_ciudad RECORD;
    BEGIN
        wruta = '../facturas_ventas/' || wdoc_cliente;
        SELECT clientDoc, clientPun, clientAct INTO wreg_cliente FROM cliente WHERE clientDoc=wdoc_cliente FOR UPDATE;
        IF NOT FOUND THEN
            wmessage = 'El cliente no se encuentra registrado';         --VALIDAMOS EXISTENCIA DEL CLIENTE
            RETURN wmessage;
        END IF;

        IF wreg_cliente.clientAct = FALSE THEN
            wmessage = 'El cliente no está activo';                     --VALIDAMOS QUE EL CLIENTE ESTÉ ACTIVO
            RETURN wmessage;
        END IF;

        SELECT max(envioNum) INTO wnum_envio FROM envio;
        IF wnum_envio IS NULL THEN
            wnum_envio = 0;
        END IF;
        wnum_envio = wnum_envio + 1;
        

        i=1;
        CASE wtipopago
            WHEN 'Ninguno' THEN
                SELECT COUNT(ventaNum) INTO wpendientes FROM venta WHERE ventaRec=false AND docClient=wdoc_cliente;
                IF wpendientes > 0 THEN
                    wmessage = 'El cliente tiene un pedido pendiente por pagar'; --VALIDAMOS QUE EL CLIENTE NO DEBA NINGÚN PEDIDO
                    RETURN wmessage;
                END IF;
                SELECT numFacFal INTO wfactura_falsa FROM parametros FOR UPDATE;               --TRAEMOS NÚMERO DE FACTURA ACTUAL
                IF NOT FOUND THEN
                    wmessage = 'No se pudo encontrar el útimo número falso de factura registrado';
                    RETURN wmessage;
                END IF;
                IF wfactura_falsa IS NULL THEN
                    wmessage = 'Debe asignar un valor para arranque de las facturas falsas o temporales';
                    RETURN wmessage;
                END IF;
                wfactura_falsa = wfactura_falsa - 1;
                IF wventa_dom = FALSE THEN
                    INSERT INTO venta(ventaNum, docClient, departamento, ciudad, tipopago, usr_insert, usr_insert_rol) 
                            VALUES(wfactura_falsa, wdoc_cliente, wdepartamento, wciudad, wtipopago, wusr_insert, wusr_insert_rol);
                    IF NOT FOUND THEN
                        wmessage = 'Error en la inserción';                 --INSERCIÓN EN CASO DE QUE EL TIPO DE PAGO SEA NINGUNO
                        RETURN wmessage;
                    END IF;
                ELSE
                    INSERT INTO venta(ventaNum, docClient, departamento, ciudad, tipopago, ventaDom, usr_insert, usr_insert_rol) 
                            VALUES(wfactura_falsa, wdoc_cliente, wdepartamento, wciudad, wtipopago, wventa_dom, wusr_insert, wusr_insert_rol);
                    IF NOT FOUND THEN
                        wmessage = 'Error en la inserción';                 --INSERCIÓN EN CASO DE QUE EL TIPO DE PAGO SEA NINGUNO
                        RETURN wmessage;
                    END IF;
                    -- AQUI INICIA LA INSERCIÓN DE LOS DATOS DEL DOMICILIO --
                    SELECT ciudadId, precioDom INTO wreg_ciudad FROM ciudad WHERE ciudadId=wciudad_id;
                    IF NOT FOUND THEN                                               --VERIFICAMOS EXISTENCIA DEL MUNICIPIO
                        wmessage = 'Este municipio no se encuentra registrado';
                        RETURN wmessage;
                    END IF;
                    INSERT INTO envio(envioNum, numVenta, idCiudad, envioDocDes, envioNomDes, envioDirDes, envioTelDes, envioPre, usr_insert, usr_insert_rol) 
                            VALUES(wnum_envio, wfactura_falsa, wreg_ciudad.ciudadId, wdoc_recibe, wnom_recibe, wdir_recibe, wtel_recibe, wreg_ciudad.precioDom, wusr_insert, wusr_insert_rol);
                    IF NOT FOUND THEN                                           --VALIDAMOS QUE LOS PUNTOS DEL CLIENTE SE HAYAN ACTUALIZADO
                        wmessage = 'Error en la inserción del envío';
                        RETURN wmessage;
                    END IF;
                    -- AQUI TEMRINA LA INSERCIÓN DE LOS DATOS DEL DOMICILIO --
                END IF;
                FOR i in 1..cantarray_prod LOOP     -- INICIO DEL CICLO DE DETALLES --
                    SELECT pr.producCod, pr.producSto, pr.producAct INTO wreg_producto FROM producto pr 
                    WHERE pr.producCod = wcod_producto[i] FOR UPDATE;
                    IF NOT FOUND THEN
                        wmessage = 'El producto solicitado de referencia ' || wcod_producto[i] || ' no se ha encontrado';
                        RETURN wmessage;                                        --VALIDAMOS EXISTENCIA DEL PRODUCTO
                    END IF;
                    IF wreg_producto.producAct = FALSE THEN
                        wmessage = 'El producto de referencia ' || wcod_producto[i] || ' no se encuentra disponible para la venta';
                        RETURN wmessage;                                        --VALIDAMOS QUE EL PRODUCTO ESTÉ DISPONIBLE PARA LA VENTA
                    END IF;
                    IF wcan_producto[i] > wreg_producto.producSto THEN
                        wmessage = 'La cantidad solicitada del producto de referencia ' || wcod_producto[i] || ' sobrepasa las unidades disponibles';
                        RETURN wmessage;                                        --VALIDAMOS SUFICIENCIA DE STOCK DEL PRODUCTO SOLICITADO
                    END IF;
                    
                    INSERT INTO detalleventa(numVenta, codProduc, detVentaCan, precioProduc, detVentaDes, detVentaValPar, usr_insert, usr_insert_rol) 
                                VALUES(wfactura_falsa, wcod_producto[i], wcan_producto[i], wprecio_producto[i], wdes_producto[i], wparcial_producto[i], wusr_insert, wusr_insert_rol);
                    IF NOT FOUND THEN                                           --VALIDAMOS QUE SE HAYA HECHO LA INSERCIÓN DEL DETALLE DE VENTA
                        wmessage = 'Error en la inserción del detalle de venta para el producto de referencia ' || wcod_producto[i];
                        RETURN wmessage;
                    END IF;
                END LOOP;   -- FIN DEL CICLO DE DETALLES --
                UPDATE parametros SET numFacFal = wfactura_falsa, usr_update=wusr_insert, usr_update_rol=wusr_insert_rol;
                IF NOT FOUND THEN                                           --VALIDAMOS QUE LOS PUNTOS DEL CLIENTE SE HAYAN ACTUALIZADO
                    wmessage = 'Error en la actualización del parámetro de número de factura temporal actual';
                    RETURN wmessage;
                END IF;
                wmessage = '00000';
                RETURN wmessage;
            ELSE
                SELECT numFacIni INTO wnum_venta FROM parametros FOR UPDATE;               --TRAEMOS NÚMERO DE FACTURA ACTUAL
                IF NOT FOUND THEN
                    wmessage = 'No se pudo encontrar el útimo número de factura registrado';
                    RETURN wmessage;
                END IF;
                IF wnum_venta IS NULL THEN
                    wmessage = 'Debe asignar un valor para arranque de las facturas';
                    RETURN wmessage;
                END IF;
                wnum_venta = wnum_venta + 1;
                IF wventa_dom = FALSE THEN
                    INSERT INTO venta(ventaNum, docClient, departamento, ciudad, tipopago, ventaRutFac, ventaRec, usr_insert, usr_insert_rol) 
                            VALUES(wnum_venta, wdoc_cliente, wdepartamento, wciudad, wtipopago, wruta, TRUE, wusr_insert, wusr_insert_rol);
                    IF NOT FOUND THEN
                        wmessage = 'Error en la inserción';                 --INSERCIÓN EN CASO DE QUE EL TIPO DE PAGO SEA OTRO
                        RETURN wmessage;
                    END IF;
                ELSE
                    INSERT INTO venta(ventaNum, docClient, departamento, ciudad, tipopago, ventaRutFac, ventaRec, ventaDom, usr_insert, usr_insert_rol) 
                            VALUES(wnum_venta, wdoc_cliente, wdepartamento, wciudad, wtipopago, wruta, TRUE, wventa_dom, wusr_insert, wusr_insert_rol);
                    IF NOT FOUND THEN
                        wmessage = 'Error en la inserción';                 --INSERCIÓN EN CASO DE QUE EL TIPO DE PAGO SEA OTRO
                        RETURN wmessage;
                    END IF;
                    -- AQUI INICIA LA INSERCIÓN DE LOS DATOS DEL DOMICILIO --
                    SELECT ciudadId, precioDom INTO wreg_ciudad FROM ciudad WHERE ciudadId=wciudad_id;
                    IF NOT FOUND THEN                                               --VERIFICAMOS EXISTENCIA DEL MUNICIPIO
                        wmessage = 'Este municipio no se encuentra registrado';
                        RETURN wmessage;
                    END IF;
                    INSERT INTO envio(envioNum, numVenta, idCiudad, envioDocDes, envioNomDes, envioDirDes, envioTelDes, envioPre, usr_insert, usr_insert_rol) 
                            VALUES(wnum_envio, wnum_venta, wreg_ciudad.ciudadId, wdoc_recibe, wnom_recibe, wdir_recibe, wtel_recibe, wreg_ciudad.precioDom, wusr_insert, wusr_insert_rol);
                    IF NOT FOUND THEN                                           --VALIDAMOS QUE LOS PUNTOS DEL CLIENTE SE HAYAN ACTUALIZADO
                        wmessage = 'Error en la inserción del envío';
                        RETURN wmessage;
                    END IF;
                    -- AQUI TEMRINA LA INSERCIÓN DE LOS DATOS DEL DOMICILIO --
                END IF;
                FOR i in 1..cantarray_prod LOOP     -- INICIO DEL CICLO DE DETALLES --
                    SELECT pr.producCod, pr.producSto, pr.producAct INTO wreg_producto FROM producto pr 
                    WHERE pr.producCod = wcod_producto[i] FOR UPDATE;
                    IF NOT FOUND THEN
                        wmessage = 'El producto solicitado de referencia ' || wcod_producto[i] || ' no se ha encontrado';
                        RETURN wmessage;                                        --VALIDAMOS EXISTENCIA DEL PRODUCTO
                    END IF;
                    IF wreg_producto.producAct = FALSE THEN
                        wmessage = 'El producto de referencia ' || wcod_producto[i] || ' no se encuentra disponible para la venta';
                        RETURN wmessage;                                        --VALIDAMOS QUE EL PRODUCTO ESTÉ DISPONIBLE PARA LA VENTA
                    END IF;
                    IF wcan_producto[i] > wreg_producto.producSto THEN
                        wmessage = 'La cantidad solicitada del producto de referencia ' || wcod_producto[i] || ' sobrepasa las unidades disponibles';
                        RETURN wmessage;                                        --VALIDAMOS SUFICIENCIA DE STOCK DEL PRODUCTO SOLICITADO
                    END IF;
                    
                    INSERT INTO detalleventa(numVenta, codProduc, detVentaCan, precioProduc, detVentaDes, detVentaValPar, usr_insert, usr_insert_rol) 
                                VALUES(wnum_venta, wcod_producto[i], wcan_producto[i], wprecio_producto[i], wdes_producto[i], wparcial_producto[i], wusr_insert, wusr_insert_rol);
                    IF NOT FOUND THEN                                           --VALIDAMOS QUE SE HAYA HECHO LA INSERCIÓN DEL DETALLE DE VENTA
                        wmessage = 'Error en la inserción del detalle de venta para el producto de referencia ' || wcod_producto[i];
                        RETURN wmessage;
                    END IF;
                    wreg_producto.producSto = wreg_producto.producSto - wcan_producto[i];
                    UPDATE producto SET producSto = wreg_producto.producSto, usr_update=wusr_insert, usr_update_rol=wusr_insert_rol
                                        WHERE producCod = wcod_producto[i];
                    IF NOT FOUND THEN                                           --VALIDAMOS QUE EL STOCK DEL PRODUCTO SE HAYA ACTUALIZADO
                        wmessage = 'Error en la actualización del stock del producto de referencia ' || wcod_producto[i];
                        RETURN wmessage;
                    END IF;
                END LOOP;   -- FIN DEL CICLO DE DETALLES --
                wpuntos_cliente = wpuntos_cliente + wreg_cliente.clientPun;
                UPDATE cliente SET clientPun = wpuntos_cliente, usr_update=wusr_insert, usr_update_rol=wusr_insert_rol
                                WHERE clientDoc=wdoc_cliente;
                IF NOT FOUND THEN                                           --VALIDAMOS QUE LOS PUNTOS DEL CLIENTE SE HAYAN ACTUALIZADO
                    wmessage = 'Error en la actualización de los puntos del cliente de documento ' || wdoc_cliente;
                    RETURN wmessage;
                END IF;
                UPDATE parametros SET numFacIni = wnum_venta, usr_update=wusr_insert, usr_update_rol=wusr_insert_rol;
                IF NOT FOUND THEN                                           --VALIDAMOS QUE LOS PUNTOS DEL CLIENTE SE HAYAN ACTUALIZADO
                    wmessage = 'Error en la actualización del parámetro de número de factura temporal actual';
                    RETURN wmessage;
                END IF;
            wmessage = TO_CHAR(wnum_venta, 'FM99999');
            RETURN wmessage;
        END CASE;
    END;
$$

LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION fun_insert_proveedor(wnit_proveedor proveedor.proveeNit%TYPE,
												wid_ciudad ciudad.ciudadId%TYPE,
												wnom_proveedor proveedor.proveeNom%TYPE,
                                            	wdir_proveedor proveedor.proveeDir%TYPE,
												wtel_proveedor proveedor.proveeTel%TYPE,
												wema_proveedor proveedor.proveeEma%TYPE,
                                                wuser_insert proveedor.usr_insert%TYPE,
                                                wuser_insert_rol proveedor.usr_insert_rol%TYPE) RETURNS VARCHAR AS
$BODY$
	DECLARE wmessage VARCHAR;
	DECLARE wproveedor proveedor.proveeNit%TYPE;
    BEGIN
		wmessage = '00000';
		SELECT proveeNit into wproveedor from proveedor WHERE proveeNit = wnit_proveedor;
		IF FOUND THEN
			wmessage = 'El proveedor ya se encuentra registrado';
			RETURN wmessage;
		END IF;
        INSERT INTO proveedor(proveeNit,idciudad,proveeNom,proveeDir,proveeTel,proveeEma,usr_insert,usr_insert_rol) 
        VALUES(wnit_proveedor, wid_ciudad, wnom_proveedor, wdir_proveedor,wtel_proveedor, wema_proveedor,wuser_insert,wuser_insert_rol);
        IF FOUND THEN
            RETURN wmessage;
        ELSE
			wmessage = 'Error en la inserción';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_insert_seccion(wnom_estante        seccion.nomEstant%TYPE, 
                                                wnum_bandeja       seccion.numBandeja%TYPE,
                                                wcod_seccion       seccion.seccionCod%TYPE,
                                                wuser_insert        seccion.usr_insert%TYPE,
                                                wuser_insert_rol    seccion.usr_insert_rol%TYPE) RETURNS VARCHAR AS                                           
$BODY$
    DECLARE wmessage VARCHAR;
	DECLARE 
		wseccion RECORD;
    BEGIN
		wmessage='00000';
		SELECT seccionCod, numBandeja, nomEstant INTO wseccion from seccion 
		WHERE seccionCod = wcod_seccion AND numBandeja = wnum_bandeja 
        AND nomEstant = wnom_estante;
		IF FOUND THEN
			wmessage = 'La sección de esta bandeja en este estante ya se encuentra registrada';
			RETURN wmessage;
		END IF;
        INSERT INTO seccion(nomEstant,numBandeja,seccionCod,usr_insert,usr_insert_rol) 
                        VALUES(wnom_estante, wnum_bandeja, wcod_seccion, wuser_insert, wuser_insert_rol);
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage='Error al insertar';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_insert_tipoproducto( wnom_tipoproducto	tipoproducto.tipoProNom%TYPE,
                                                    wuser_insert tipoproducto.usr_insert%TYPE,
                                                    wuser_insert_rol tipoproducto.usr_insert_rol%TYPE) RETURNS VARCHAR AS                                           
$BODY$
	DECLARE 
		wtipoproducto 	tipoproducto.tipoProNom%TYPE;
		wcontador 		tipoproducto.tipoProId%TYPE;
        wmessage VARCHAR;
    BEGIN
		wmessage='00000';
		SELECT tipoProNom INTO wtipoproducto from tipoproducto 
		WHERE tipoProNom = wnom_tipoproducto;
		IF FOUND THEN
			wmessage = 'La categoría de producto ya se encuentra registrada';
			RETURN wmessage;
		END IF;
		SELECT max(tipoProId) INTO wcontador FROM tipoproducto;
		IF wcontador IS NULL THEN
			wcontador = 0;
		END IF;
		wcontador = wcontador + 1;
        INSERT INTO tipoproducto VALUES(wcontador, wnom_tipoproducto, wuser_insert, wuser_insert_rol);
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage = 'Error en la inserción';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_update_ciudad(  wcod_ciudad      ciudad.ciudadId%TYPE, 
                                                wdom_ciudad      ciudad.precioDom%TYPE,
                                                wuser_update ciudad.usr_update%TYPE,
                                                wuser_update_rol  ciudad.usr_update_rol%TYPE) RETURNS VARCHAR AS
$BODY$
	DECLARE wmessage VARCHAR;
    DECLARE wciudad ciudad.ciudadId%TYPE;
    BEGIN
		wmessage='00000';
        SELECT ciudadId INTO wciudad FROM ciudad WHERE ciudadId = wcod_ciudad FOR UPDATE;
        UPDATE ciudad SET precioDom         = wdom_ciudad,
                            usr_update      = wuser_update,
                            usr_update_rol  = wuser_update_rol,
                            fec_update      = now()
        WHERE ciudadId = wcod_ciudad;
        IF FOUND THEN
            RETURN wmessage;
        ELSE
			wmessage='Error en la actualización';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_update_cliente(wdoc_cliente cliente.clientDoc%TYPE,
                                            wciu_cliente ciudad.ciudadId%TYPE,
											wnom_cliente cliente.clientNom%TYPE,
                                            wdir_cliente cliente.clientDir%TYPE,wtel_cliente cliente.clientTel%TYPE,
											wema_cliente cliente.clientEma%TYPE, wuser_update cliente.usr_update%TYPE,
                                            wuser_update_rol  cliente.usr_update_rol%TYPE) RETURNS VARCHAR AS
$BODY$
    DECLARE wmessage VARCHAR;
    DECLARE wciudad ciudad.ciudadId%TYPE;
    DECLARE wcliente cliente.clientDoc%TYPE;
    BEGIN
        wmessage='00000';
        SELECT clientDoc INTO wcliente FROM cliente WHERE clientDoc = wdoc_cliente FOR UPDATE;
        SELECT ciudadId INTO wciudad FROM ciudad WHERE ciudadId=wciu_cliente;
        IF NOT FOUND THEN
            wmessage = 'La ciudad no se encuentra registrada';
            RETURN wmessage;
        END IF;
        UPDATE cliente SET      clientNom       = wnom_cliente,
								idciudad		= wciu_cliente,
                                clientDir       = wdir_cliente,
                                clientTel       = wtel_cliente,
                                clientema       = wema_cliente,
                                usr_update      = wuser_update,
                                usr_update_rol  = wuser_update_rol,
                                fec_update      = now()
        WHERE clientDoc = wdoc_cliente;
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage = 'Error en la actualización';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_update_cobro(wnum_venta	venta.ventaNum%TYPE,
                                            wtipo_pago venta.tipopago%TYPE,
                                            wusr_insert venta.usr_insert%TYPE,
                                            wusr_insert_rol  venta.usr_insert_rol%TYPE) RETURNS VARCHAR AS
$BODY$
    DECLARE wmessage VARCHAR;
    DECLARE wreg_venta RECORD;
    DECLARE i INTEGER;
    DECLARE wventa_num parametros.numFacIni%TYPE;
    DECLARE wreg_producto RECORD;
    DECLARE wreg_cliente RECORD;
    DECLARE cur refcursor;
    DECLARE fila RECORD;
    DECLARE wruta VARCHAR;
    DECLARE wpuntos_cliente INTEGER;
    
    DECLARE wventa_envio envio.numVenta%TYPE;
    BEGIN
        wpuntos_cliente = 0;
        SELECT ventaNum, docClient, ventaDom INTO wreg_venta from venta 
		WHERE ventaNum= wnum_venta FOR UPDATE;
		IF NOT FOUND THEN
			wmessage = 'La venta temporal no se encuentra registrada';
			RETURN wmessage;
		END IF;
        SELECT cl.clientDoc, cl.clientAct, cl.clientPun, d.departNom, c.ciudadNom INTO wreg_cliente FROM cliente cl 
        JOIN ciudad c ON cl.idCiudad=c.ciudadId JOIN departamento d ON c.idDepart=d.departId 
        WHERE clientDoc=wreg_venta.docClient FOR UPDATE;
        IF wreg_cliente.clientDoc IS NULL THEN
            wmessage = 'El cliente no se encuentra registrado';         --VALIDAMOS QUE EL CLIENTE ESTÉ REGISTRADO
            RETURN wmessage;
        END IF;
        IF wreg_cliente.clientAct = FALSE THEN
            wmessage = 'El cliente no está activo';                     --VALIDAMOS QUE EL CLIENTE ESTÉ ACTIVO
            RETURN wmessage;
        END IF;
        wruta = '../facturas_ventas/' || wreg_cliente.clientDoc;

        SELECT numFacIni INTO wventa_num FROM parametros;               --TRAEMOS NÚMERO DE FACTURA ACTUAL
        IF NOT FOUND THEN
            wmessage = 'No se pudo encontrar el útimo número de factura registrado';
            RETURN wmessage;
        END IF;
        IF wventa_num IS NULL THEN
            wmessage = 'Debe asignar un valor para arranque de las facturas';
            RETURN wmessage;
        END IF;
        wventa_num = wventa_num + 1;
        
        IF wtipo_pago != 'Efectivo' AND wtipo_pago != 'Tarjeta' AND wtipo_pago != 'Transferencia Banco' THEN
            wmessage = 'Modo de cobro no válido';
            RETURN wmessage;
        END IF;
        

        /* AQUI EMPIEZA LA LOCURA */ 

        IF wreg_venta.ventaDom = TRUE THEN
            INSERT INTO venta(ventaNum, docClient, departamento, ciudad, tipopago, ventaRutFac, ventaRec, ventaDom, usr_insert, usr_insert_rol) 
                            VALUES(wventa_num, wreg_cliente.clientDoc, wreg_cliente.departNom, wreg_cliente.ciudadNom, 
                                    wtipo_pago, wruta, TRUE, TRUE, wusr_insert, wusr_insert_rol);
            IF NOT FOUND THEN
                wmessage = 'Error en la inserción';                
                RETURN wmessage;
            END IF;
        ELSE
            INSERT INTO venta(ventaNum, docClient, departamento, ciudad, tipopago, ventaRutFac, ventaRec, usr_insert, usr_insert_rol) 
                            VALUES(wventa_num, wreg_cliente.clientDoc, wreg_cliente.departNom, wreg_cliente.ciudadNom, 
                                    wtipo_pago, wruta, TRUE, wusr_insert, wusr_insert_rol);
            IF NOT FOUND THEN
                wmessage = 'Error en la inserción';                
                RETURN wmessage;
            END IF;
        END IF;

        OPEN cur FOR SELECT * FROM detalleVenta WHERE numVenta = wnum_venta;
            IF NOT FOUND THEN
                wmessage = 'No se pudieron leer los productos en esta venta';
                CLOSE cur;
                RETURN wmessage;
            END IF;
            i=1;

            FETCH cur INTO fila;
            WHILE (FOUND) LOOP
                SELECT pr.producCod, pr.producSto, pr.producAct INTO wreg_producto FROM producto pr 
                WHERE pr.producCod = fila.codproduc FOR UPDATE;
                IF NOT FOUND THEN
                    wmessage = 'El producto solicitado de referencia ' || fila.codproduc || ' no se ha encontrado';
                    CLOSE cur;
                    RETURN wmessage;                                        --VALIDAMOS EXISTENCIA DEL PRODUCTO
                END IF;
                IF wreg_producto.producAct = FALSE THEN
                    wmessage = 'El producto de referencia ' || fila.codproduc || ' no se encuentra disponible para la venta';
                    CLOSE cur;
                    RETURN wmessage;
                END IF;

                IF fila.detventacan > wreg_producto.producSto THEN
                    wmessage = 'La cantidad solicitada del producto de referencia ' || fila.codproduc || ' sobrepasa las unidades disponibles';
                    CLOSE cur;
                    RETURN wmessage;                                        --VALIDAMOS SUFICIENCIA DE STOCK DEL PRODUCTO SOLICITADO
                END IF;

                INSERT INTO detalleventa(numVenta, codProduc, detVentaCan, precioProduc, detVentaDes, detVentaValPar, usr_insert, usr_insert_rol) 
                            VALUES(wventa_num, wreg_producto.producCod, fila.detventacan, fila.precioproduc, fila.detventades, fila.detventavalpar, wusr_insert, wusr_insert_rol);
                IF NOT FOUND THEN                                           --VALIDAMOS QUE SE HAYA HECHO LA INSERCIÓN DEL DETALLE DE VENTA
                    wmessage = 'Error en la inserción del detalle de venta para el producto de referencia ' || fila.codProduc;
                    CLOSE cur;
                    RETURN wmessage;
                END IF;
                wreg_producto.producSto = wreg_producto.producSto - fila.detventacan;
                UPDATE producto SET producSto = wreg_producto.producSto, usr_update=wusr_insert, usr_update_rol=wusr_insert_rol
                                    WHERE producCod = fila.codproduc;
                IF NOT FOUND THEN                                           --VALIDAMOS QUE EL STOCK DEL PRODUCTO SE HAYA ACTUALIZADO
                    wmessage = 'Error en la actualización del stock del producto de referencia ' || fila.codproduc;
                    CLOSE cur;
                    RETURN wmessage;
                END IF;
                wpuntos_cliente = wpuntos_cliente + (fila.detventavalpar / 1000);
                FETCH cur INTO fila;
            END LOOP;
        CLOSE cur;
        
        -- FIN DEL CICLO DE DETALLES --
        wpuntos_cliente = wpuntos_cliente + wreg_cliente.clientPun;
        UPDATE cliente SET clientPun = wpuntos_cliente, usr_update=wusr_insert, usr_update_rol=wusr_insert_rol
                        WHERE clientDoc=wreg_cliente.clientDoc;
        IF NOT FOUND THEN                                           --VALIDAMOS QUE LOS PUNTOS DEL CLIENTE SE HAYAN ACTUALIZADO
            wmessage = 'Error en la actualización de los puntos del cliente de documento ' || wreg_cliente.clientDoc;
            RETURN wmessage;
        END IF;
        UPDATE parametros SET numFacIni = wventa_num, usr_update=wusr_insert, usr_update_rol=wusr_insert_rol;
        IF NOT FOUND THEN                                           --VALIDAMOS QUE LOS PUNTOS DEL CLIENTE SE HAYAN ACTUALIZADO
            wmessage = 'Error en la actualización del parámetro de número de factura actual';
            RETURN wmessage;
        END IF;
        SELECT numVenta INTO wventa_envio FROM envio WHERE numVenta=wnum_venta;
        IF wventa_envio IS NULL THEN
            DELETE FROM venta WHERE ventaNum=wnum_venta;
            IF NOT FOUND THEN
                wmessage = 'Error en la eliminación de la factura temporal';
                RETURN wmessage;
            END IF;
        ELSE
            UPDATE envio SET numVenta = wventa_num WHERE numVenta=wnum_venta;
            IF NOT FOUND THEN
                wmessage = 'Error en la actualización del envio';
                RETURN wmessage;
            END IF;
            DELETE FROM venta WHERE ventaNum=wnum_venta;
            IF NOT FOUND THEN
                wmessage = 'Error en la eliminación de la factura temporal';
                RETURN wmessage;
            END IF;
        END IF;
        wmessage = TO_CHAR(wventa_num, 'FM99999');
        RETURN wmessage;
        /* AQUI TERMINA LA LOCURA */
    END;
$BODY$
LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION fun_update_contactenos( wid_contactenos	contactenos.contacId%TYPE) RETURNS VARCHAR AS
$BODY$
    DECLARE wcontac contactenos.contacId%TYPE;
    DECLARE wmessage VARCHAR;
    BEGIN
        wmessage = '00000';
        SELECT contacId INTO wcontac FROM contactenos WHERE contacId=wid_contactenos FOR UPDATE;
        IF NOT FOUND THEN
            wmessage = 'El registro no se encuentra registrado';
            RETURN wmessage;
        END IF;
        UPDATE contactenos SET contacRev = TRUE 
        WHERE contacId = wid_contactenos;
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage = 'Error en la actualización';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_update_empresa(  wnit_empresa empresatransporte.empreTraNit%TYPE, 
                                                wnom_empresa empresatransporte.empreTraNom%TYPE, 
												wtel_empresa empresatransporte.empreTraTel%TYPE,wuser_update empresatransporte.usr_update%TYPE,
                                                wuser_update_rol  empresatransporte.usr_update_rol%TYPE) RETURNS VARCHAR AS      
$BODY$
    DECLARE wmessage VARCHAR;
    DECLARE wempresa empresatransporte.empreTraNit%TYPE;
    BEGIN
        wmessage='00000';
        SELECT empreTraNit INTO wempresa FROM empresatransporte WHERE empreTraNit = wnit_empresa FOR UPDATE;
        UPDATE empresatransporte SET    empreTraNit       = wnit_empresa,
                                        empreTraNom       = wnom_empresa,
                                        empreTraTel       = wtel_empresa,
                                        usr_update        = wuser_update,
                                        usr_update_rol    = wuser_update_rol,
                                        fec_update        = now()
        WHERE empreTraNit = wnit_empresa;
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage='Error en la actualización';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_update_linea( wid_linea	linea.lineaId%TYPE,
                                            wnom_linea	linea.lineaNom%TYPE,
                                            wuser_update linea.usr_update%TYPE,
                                            wuser_update_rol  linea.usr_update_rol%TYPE) RETURNS VARCHAR AS
$BODY$
    DECLARE wlinea 	linea.lineaNom%TYPE;
    DECLARE wmessage VARCHAR;
    BEGIN
        wmessage = '00000';
        SELECT lineaNom INTO wlinea FROM linea WHERE lineaId=wid_linea FOR UPDATE;
        SELECT lineaNom INTO wlinea FROM linea 
		WHERE lineaNom = wnom_linea AND lineaId != wid_linea;
		IF FOUND THEN
			wmessage = 'La línea ya se encuentra registrada';
			RETURN wmessage;
		END IF;
        UPDATE linea SET lineaNom       = wnom_linea,
                        usr_update     = wuser_update,
                        usr_update_rol = wuser_update_rol,
                        fec_update     = now()
        WHERE lineaId = wid_linea;
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage = 'Error en la actualización';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_update_marca( wid_marca	marca.marcaId%TYPE,
                                                    wnom_marca	marca.marcaNom%TYPE,
                                                    wuser_update marca.usr_update%TYPE,
                                                    wuser_update_rol marca.usr_update_rol%TYPE) RETURNS VARCHAR AS
$BODY$
    DECLARE wmessage VARCHAR;
    DECLARE wmarca 	marca.marcaNom%TYPE;
    BEGIN
        wmessage = '00000';
        SELECT marcaNom INTO wmarca FROM marca WHERE marcaId=wid_marca FOR UPDATE; 
        SELECT marcaNom INTO wmarca FROM marca 
		WHERE marcaNom = wnom_marca AND marcaId != wid_marca;
		IF FOUND THEN
			wmessage = 'La marca ya se encuentra registrada';
			RETURN wmessage;
		END IF;
        UPDATE marca SET marcaNom   = wnom_marca,
                        usr_update     = wuser_update,
                        usr_update_rol = wuser_update_rol,
                        fec_update     = now()
        WHERE marcaId = wid_marca;
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage = 'Error en la actualización';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_update_pago(wnum_pedido	pedidoproveedor.pedidoNum%TYPE,
                                            wnit_proveedor proveedor.proveeNit%TYPE,
                                            wpago_pedido pedidoproveedor.pedidoPag%TYPE,
                                            wtipo_pago pedidoproveedor.tipopago%TYPE,
                                            wuser_update pedidoproveedor.usr_update%TYPE,
                                            wuser_update_rol  pedidoproveedor.usr_update_rol%TYPE) RETURNS VARCHAR AS
$BODY$
    DECLARE wmessage VARCHAR;
    DECLARE wpedido 	pedidoproveedor.pedidoNum%TYPE;
    BEGIN
        wmessage = '00000';
        SELECT pedidoNum INTO wpedido from pedidoproveedor 
		WHERE pedidoNum= wnum_pedido AND nitProvee = wnit_proveedor FOR UPDATE;
		IF NOT FOUND THEN
			wmessage = 'El pedido no se encuentra registrado';
			RETURN wmessage;
		END IF;
        
        IF (wtipo_pago = 'Ninguno' AND wpago_pedido = TRUE) OR (wtipo_pago != 'Ninguno' AND wpago_pedido = FALSE) THEN
            wmessage = 'Si se realizó el pago, el modo de pagarlo no puede ser (Ninguno), y viceversa tampoco.';
            RETURN wmessage;
        END IF;
        UPDATE pedidoproveedor SET pedidoPag = wpago_pedido,
                                    tipopago = wtipo_pago,
                                    usr_update       = wuser_update,
                                    usr_update_rol   = wuser_update_rol,
                                    fec_update       = now()
        WHERE pedidoNum = wnum_pedido AND nitProvee = wnit_proveedor;
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage = 'Error en la actualización';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_update_parametros(wnit_empresa parametros.empreNit%TYPE, wnom_empresa parametros.empreNom%TYPE,
                                            wdirec_empresa parametros.empreDir%TYPE,
                                            wtelef_empresa parametros.empreTel%TYPE,
                                            wcelul_empresa parametros.empreCel%TYPE,
                                            wcorreo_empresa parametros.empreEma%TYPE,
                                            wnumfacini_empresa parametros.numFacIni%TYPE,
											wredpundes_empresa parametros.redPunDes%TYPE,
                                            wredpundom_empresa parametros.redPunDom%TYPE,
                                            wtiemposalir_empresa parametros.tiempoSalir%TYPE,
											wadmincon_empresa parametros.adminCon%TYPE,
                                            wuser_update parametros.usr_update%TYPE,
                                            wuser_update_rol parametros.usr_update_rol%TYPE) RETURNS VARCHAR AS
$BODY$
    DECLARE wmessage VARCHAR;
    DECLARE wempresa parametros.empreNit%TYPE;
    BEGIN
        wmessage='00000';
        SELECT empreNit INTO wempresa FROM parametros FOR UPDATE;
        IF wadmincon_empresa  IS NOT NULL AND wadmincon_empresa != '' THEN
            UPDATE parametros SET empreNom      = wnom_empresa,
                                    empreDir    = wdirec_empresa,
                                    empreTel    = wtelef_empresa,
                                    empreCel    = wcelul_empresa,
                                    empreEma    = wcorreo_empresa,
                                    numFacIni   = wnumfacini_empresa,
                                    redPunDes       = wredpundes_empresa,
                                    redPunDom       = wredpundom_empresa,
                                    tiempoSalir     = wtiemposalir_empresa,
                                    adminCon        = wadmincon_empresa,
                                    usr_update      = wuser_update,
                                    usr_update_rol  = wuser_update_rol,
                                    fec_update      = now()
            WHERE empreNit = wnit_empresa;
        ELSE
            UPDATE parametros SET      empreNom       = wnom_empresa,
                                empreDir        = wdirec_empresa,
                                empreTel        = wtelef_empresa,
                                empreCel        = wcelul_empresa,
                                empreEma        = wcorreo_empresa,
								numFacIni		= wnumfacini_empresa,
                                redPunDes       = wredpundes_empresa,
                                redPunDom       = wredpundom_empresa,
                                tiempoSalir     = wtiemposalir_empresa,
                                usr_update      = wuser_update,
                                usr_update_rol  = wuser_update_rol,
                                fec_update      = now()
            WHERE empreNit = wnit_empresa;
        END IF;

        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage = 'Error en la actualización';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION fun_update_producto(wcod_producto producto.producCod%TYPE, wnom_producto producto.producNom%TYPE, 
												wpre_producto producto.producPre%TYPE, wsto_producto producto.producSto%TYPE,
                                                wuser_update producto.usr_update%TYPE, wuser_update_rol  producto.usr_update_rol%TYPE) RETURNS VARCHAR AS
$BODY$
    DECLARE wmessage VARCHAR;
    DECLARE wreg_producto RECORD;
    DECLARE diferencia INTEGER;
    BEGIN
        wmessage='00000';
        SELECT producSto, producMen INTO wreg_producto FROM producto WHERE producCod = wcod_producto FOR UPDATE;
        IF wsto_producto > wreg_producto.producSto OR wsto_producto < 0 THEN
            wmessage='Solo puede restar unidades al stock del producto y no puede haber unidades negativas';
            RETURN wmessage;
        END IF;
        -- SI EL NUEVO STOCK ES MENOR AL ANTERIOR, SE DEBE TOMAR ESA DIFERENCIA Y SUMARLA CON EL CONTADOR DE UNIDADES...
        -- RESTADAS A LA FUERZA
        diferencia = 0;
        IF wsto_producto < wreg_producto.producSto THEN
            diferencia = (wreg_producto.producSto - wsto_producto);
        END IF;
        wreg_producto.producMen = wreg_producto.producMen + diferencia;
        UPDATE producto SET     producNom       = wnom_producto,
                                producpre       = wpre_producto,
                                producSto       = wsto_producto,
                                producMen       = wreg_producto.producMen,
                                usr_update      = wuser_update,
                                usr_update_rol  = wuser_update_rol,
                                fec_update      = now()
        WHERE producCod = wcod_producto;
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage='Error al actualizar';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_update_producto(wcod_producto producto.producCod%TYPE,
                                            wnom_producto producto.producNom%TYPE,
											wmod_producto producto.producMod%TYPE,
                                            wpre_producto producto.producPre%TYPE,wid_categoria producto.idTipoPro%TYPE,
											wid_linea producto.idLinea%TYPE, wid_marca producto.idMarca%TYPE,
                                            wbod_producto producto.producBod%TYPE, west_producto producto.producEst%TYPE,
                                            wmos_producto producto.producMos%TYPE,wuser_update producto.usr_update%TYPE,
                                            wuser_update_rol  producto.usr_update_rol%TYPE) RETURNS VARCHAR AS
$BODY$
    DECLARE wubicacion  producto.nomEstant%TYPE;
    DECLARE wmessage VARCHAR;
    DECLARE wproducto producto.producCod%TYPE;
    BEGIN
        wmessage='00000';
        SELECT producCod INTO wproducto FROM producto WHERE producCod = wcod_producto FOR UPDATE;
        SELECT nomEstant INTO wubicacion FROM producto
        WHERE producCod=wcod_producto;
        IF FOUND THEN
            UPDATE producto SET producNom       = wnom_producto,
								producMod		= wmod_producto,
                                producPre       = wpre_producto,
                                idTipoPro       = wid_categoria,
                                idLinea         = wid_linea,
                                idMarca         = wid_marca,
                                producBod       = wbod_producto,
                                producEst       = west_producto,
                                producMos       = wmos_producto,
                                nomEstant = null,
                                numBandeja = null,
                                codSeccion = null,
                                usr_update       = wuser_update,
                                usr_update_rol   = wuser_update_rol,
                                fec_update       = now()
            WHERE producCod = wcod_producto;
            IF FOUND THEN
                RETURN wmessage;
            ELSE
                wmessage='Error al actualizar';
                RETURN wmessage;
            END IF;
        ELSE
            UPDATE producto SET producNom       = wnom_producto,
								producMod		= wmod_producto,
                                producPre       = wpre_producto,
                                idTipoPro       = wid_categoria,
                                idLinea         = wid_linea,
                                idMarca         = wid_marca,
                                producBod       = wbod_producto,
                                producEst       = west_producto,
                                producMos       = wmos_producto,
                                usr_update       = wuser_update,
                                usr_update_rol   = wuser_update_rol,
                                fec_update       = now()
            WHERE producCod = wcod_producto;
            IF FOUND THEN
                RETURN wmessage;
            ELSE
                wmessage='Error al actualizar';
                RETURN wmessage;
            END IF;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_update_producto(wcod_producto producto.producCod%TYPE,
                                            wnom_producto producto.producNom%TYPE,
											wmod_producto producto.producMod%TYPE,
                                            wpre_producto producto.producPre%TYPE,wid_categoria producto.idTipoPro%TYPE,
											wid_linea producto.idLinea%TYPE, wid_marca producto.idMarca%TYPE,
                                            wbod_producto producto.producBod%TYPE, west_producto producto.producEst%TYPE,
                                            wmos_producto producto.producMos%TYPE,
                                            wnom_estante producto.nomEstant%TYPE, wnum_bandeja producto.numBandeja%TYPE,
                                            wcod_seccion producto.codSeccion%TYPE,wuser_update producto.usr_update%TYPE,
                                            wuser_update_rol  producto.usr_update_rol%TYPE) RETURNS VARCHAR AS
$BODY$
    DECLARE wmessage VARCHAR;
    DECLARE wproducto producto.producCod%TYPE;
    BEGIN
        wmessage='00000';
        SELECT producCod INTO wproducto FROM producto WHERE producCod = wcod_producto FOR UPDATE;
        UPDATE producto SET     producNom       = wnom_producto,
								producMod		= wmod_producto,
                                producPre       = wpre_producto,
                                idTipoPro       = wid_categoria,
                                idLinea         = wid_linea,
                                idMarca         = wid_marca,
                                producBod       = wbod_producto,
                                producEst       = west_producto,
                                producMos       = wmos_producto,
                                nomEstant       = wnom_estante,
                                numBandeja      = wnum_bandeja,
                                codSeccion      = wcod_seccion,
                                usr_update       = wuser_update,
                                usr_update_rol   = wuser_update_rol,
                                fec_update       = now()
        WHERE producCod = wcod_producto;
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage='Error al actualizar';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_update_proveedor(wnit_proveedor proveedor.proveeNit%TYPE,
												wid_ciudad ciudad.ciudadId%TYPE,
												wnom_proveedor proveedor.proveeNom%TYPE,
                                            	wdir_proveedor proveedor.proveeDir%TYPE,
												wtel_proveedor proveedor.proveeTel%TYPE,
												wema_proveedor proveedor.proveeEma%TYPE,
                                                wuser_update proveedor.usr_update%TYPE,
                                                wuser_update_rol proveedor.usr_update_rol%TYPE) RETURNS VARCHAR AS
$BODY$
    DECLARE wmessage VARCHAR;
    DECLARE wciudad ciudad.ciudadId%TYPE;
    DECLARE wproveedor proveedor.proveeNit%TYPE;
    BEGIN
        wmessage = '00000';
        SELECT proveeNit INTO wproveedor FROM proveedor WHERE proveeNit = wnit_proveedor FOR UPDATE;
        SELECT ciudadId INTO wciudad FROM ciudad WHERE ciudadId=wid_ciudad;
        IF NOT FOUND THEN
            wmessage = 'La ciudad no se encuentra registrada';
            RETURN wmessage;
        END IF;
        UPDATE proveedor SET    proveeNit       = wnit_proveedor,
							    idCiudad		= wid_ciudad,
                                proveeNom       = wnom_proveedor,
                                proveeDir       = wdir_proveedor,
                                proveeTel       = wtel_proveedor,
                                proveeEma       = wema_proveedor,
                                usr_update       = wuser_update,
                                usr_update_rol   = wuser_update_rol,
                                fec_update       = now()
        WHERE proveeNit = wnit_proveedor;
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage = 'Error en la actualización';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_update_tipoproducto( wid_tipoproducto	tipoproducto.tipoProId%TYPE,
                                                    wnom_tipoproducto	tipoproducto.tipoProNom%TYPE,
                                                    wuser_update tipoproducto.usr_update%TYPE,
                                                    wuser_update_rol tipoproducto.usr_update_rol%TYPE) RETURNS VARCHAR AS
$BODY$
    DECLARE wmessage VARCHAR;
    DECLARE wtipoproducto 	tipoproducto.tipoProNom%TYPE;
    BEGIN
        wmessage = '00000';
        SELECT tipoProNom INTO wtipoproducto FROM tipoproducto WHERE tipoProId = wid_tipoproducto FOR UPDATE;
        SELECT tipoProNom INTO wtipoproducto FROM tipoproducto 
		WHERE tipoProNom = wnom_tipoproducto AND tipoProId != wid_tipoproducto;
		IF FOUND THEN
			wmessage = 'La categoría ya se encuentra registrada';
			RETURN wmessage;
		END IF;
        UPDATE tipoproducto SET tipoProNom   = wnom_tipoproducto,
                                usr_update       = wuser_update,
                                usr_update_rol   = wuser_update_rol,
                                fec_update       = now()
        WHERE tipoProId = wid_tipoproducto;
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage = 'Error en la actualización';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_update_usuario(wdoc_usuario usuario.usuarioDoc%TYPE,
                                            wrol_usuario usuario.usuarioRol%TYPE,
											wnom_usuario usuario.usuarioNom%TYPE,
                                            wdir_usuario usuario.usuarioDir%TYPE,wtel_usuario usuario.usuarioTel%TYPE,
											wema_usuario usuario.usuarioEma%TYPE, wuser_update usuario.usr_update%TYPE,
                                            wuser_update_rol  usuario.usr_update_rol%TYPE) RETURNS VARCHAR AS
$BODY$
    DECLARE wmessage VARCHAR;
    DECLARE wusuario usuario.usuarioDoc%TYPE;
    BEGIN
        wmessage='00000';
        SELECT usuarioDoc INTO wusuario FROM usuario WHERE usuarioDoc = wdoc_usuario AND usuarioRol=wrol_usuario FOR UPDATE;
        UPDATE usuario SET      usuarioNom       = wnom_usuario,
                                usuarioDir       = wdir_usuario,
                                usuarioTel       = wtel_usuario,
                                usuarioema       = wema_usuario,
                                usr_update       = wuser_update,
                                usr_update_rol   = wuser_update_rol,
                                fec_update       = now()
        WHERE usuarioDoc = wdoc_usuario AND usuarioRol=wrol_usuario;
        IF FOUND THEN
            RETURN wmessage;
        ELSE
            wmessage = 'Error en la actualización';
            RETURN wmessage;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

--select fun_update_cobro(-1001, 'Efectivo', 'admin', 'Administrador');


-- EL PASO DE ABAJO SOLO SE HACE UNA VEZ, SI DESEA HACERLO DE NUEVO DEBE BORRAR LA BASE DE DATOS Y VOLVER A CREAR TODO--

-- CREACIÓN DE USUARIO CLIENTE--

--CREATE USER cliente WITH PASSWORD 'cliente123'; -- 

--GRANT CONNECT ON DATABASE db_amarok TO cliente;  --

--GRANT USAGE ON SCHEMA public TO cliente;  --

--GRANT SELECT, INSERT, UPDATE ON TABLE cliente TO cliente; --

--GRANT SELECT, INSERT ON TABLE venta, redencionpuntos, detalleventa, envio TO cliente;--

--GRANT SELECT ON TABLE ciudad, departamento, tipopago TO cliente;--
